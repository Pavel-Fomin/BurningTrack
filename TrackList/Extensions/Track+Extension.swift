//
//  Track+Extension.swift
//  TrackList
//
//  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ImportedTrack –≤ Track.
//  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞ –∏–∑ JSON, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ UI –∏ –ø–ª–µ–µ—Ä.
//  –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64-encoded –æ–±–ª–æ–∂–∫–∏ –≤ UIImage.
//
//  Created by Pavel Fomin on 01.05.2025.
//

import Foundation
import UIKit

extension ImportedTrack {
    func asTrack() -> Track {
        let url: URL
        var isAvailable = false

        do {
            url = try resolvedURL()
            let accessGranted = url.startAccessingSecurityScopedResource()
            isAvailable = accessGranted && FileManager.default.fileExists(atPath: url.path)
            url.stopAccessingSecurityScopedResource()
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ bookmark –¥–ª—è \(fileName): \(error)")
            url = URL(fileURLWithPath: filePath)
            isAvailable = false // üî• —Ñ–∞–π–ª –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å—Ç–∞–≤–∏–º false
        }
        
        return Track(
            id: id,
            url: url,
            artist: artist ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç",
            title: title ?? fileName,
            duration: duration,
            fileName: fileName,
            artwork: artworkId.flatMap { ArtworkManager.loadArtwork(id: $0) },
            isAvailable: isAvailable
        )
    }
}
