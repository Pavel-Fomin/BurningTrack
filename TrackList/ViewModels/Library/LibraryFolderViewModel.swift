//
//  LibraryFolderViewModel.swift
//  TrackList
//
//  ViewModel –¥–ª—è –ø–∞–ø–∫–∏ —Ñ–æ–Ω–æ—Ç–µ–∫–∏: —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏–∏, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –∏–º–µ–Ω–∞ —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤
//
//  Created by Pavel Fomin on 08.08.2025.
//

import Foundation
import SwiftUI
import Combine

@MainActor
final class LibraryFolderViewModel: ObservableObject {
    let folder: LibraryFolder
    private let allowedAudioExts: Set<String> = ["mp3","flac","wav","aiff","aac","m4a","ogg"]
    private let initialParseCount = 20                     /// –ø–æ–¥–±–µ—Ä—ë–º –ø–æ–∑–∂–µ (20‚Äì40)
    private var lastScannedURLs: [URL] = []                /// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∞ —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å tail –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    private var tailWarmupTask: Task<Void, Never>?
    private var cancellables = Set<AnyCancellable>()
    
    @Published var trackSections: [TrackSection] = []          /// –ì—Ä—É–ø–ø—ã —Ç—Ä–µ–∫–æ–≤ –ø–æ –¥–∞—Ç–µ
    @Published var trackListNamesByURL: [URL: [String]] = [:]  /// –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: URL ‚Üí [–Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ç—Ä–µ–∫]
    @Published var metadataByURL: [URL: TrackMetadataCacheManager.CachedMetadata] = [:]  /// –ö–µ—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (artist, title, duration –∏ –¥—Ä.)
    @Published var isLoading: Bool = false
    @Published private(set) var didLoad: Bool = false
    @Published private(set) var didLoadTrackListNames = false
    @Published var subfolders: [LibraryFolder] = []
    @Published var pendingRevealTrackURL: URL?
    @Published var revealedTrackID: UUID? = nil               /// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç—Ä–µ–∫–∞ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞
    @Published private(set) var didStartTailWarmup = false    /// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–≤–æ—Å—Ç–æ–≤–æ–π –ø–æ–¥–≥—Ä—É–∑–∫–æ–π
    @Published var scrollTargetID: UUID? = nil                /// –¶–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    
    var headCount: Int { min(initialParseCount, trackSections.flatMap { $0.tracks }.count) }  /// –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ UI
    
    func loadSubfoldersIfNeeded() {
        guard subfolders.isEmpty else { return }
        subfolders = MusicLibraryManager.shared.loadSubfolders(for: folder.url)
    }
    
    private var trackListsObserver: NSObjectProtocol?
    
    init(folder: LibraryFolder) {
        self.folder = folder
        trackListsObserver = NotificationCenter.default.addObserver(
            forName: .trackListsDidChange,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            // –∑–∞–º—ã–∫–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ ‚Üí –≤–Ω—É—Ç—Ä–∏ —Å–æ–∑–¥–∞—ë–º async‚Äë–∑–∞–¥–∞—á—É –Ω–∞ MainActor
            Task { @MainActor [weak self] in
                self?.loadTrackListNamesByURL()
            }
            
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π
        cancellables.removeAll()
        
        NavigationCoordinator.shared.revealTrack
            .receive(on: DispatchQueue.main)
            .sink { [weak self] url in
                guard let self else { return }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞
                guard url.deletingLastPathComponent() == self.folder.url else { return }
                
                // –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ —ç—Ç–æ—Ç reveal ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if self.pendingRevealTrackURL == url { return }
                self.pendingRevealTrackURL = url
                
                print("‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º reveal-—Å–∏–≥–Ω–∞–ª –¥–ª—è:", url.lastPathComponent)
                
                if !self.trackSections.isEmpty {
                    self.scrollToTrackIfExists(url)
                } else {
                    print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–µ–∫—Ü–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
                    Task { @MainActor [weak self] in
                        guard let self else { return }
                        for await sections in self.$trackSections.values {
                            if !sections.isEmpty {
                                print("‚úÖ –°–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ), –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª")
                                self.scrollToTrackIfExists(url)
                                break
                            }
                        }
                    }
                }
            }
            .store(in: &cancellables)
        
        // –ï—Å–ª–∏ –∫ –º–æ–º–µ–Ω—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è ViewModel —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
        if let pending = NavigationCoordinator.shared.lastRevealedTrack {
            // –µ—Å–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
            guard pendingRevealTrackURL != pending else { return }
            pendingRevealTrackURL = pending
            
            print("‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º reveal-—Å–∏–≥–Ω–∞–ª –¥–ª—è:", pending.lastPathComponent)
            
            if pending.deletingLastPathComponent() == folder.url {
                if !self.trackSections.isEmpty {
                    self.scrollToTrackIfExists(pending)
                } else {
                    print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–µ–∫—Ü–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
                    Task { @MainActor [weak self] in
                        guard let self else { return }
                        for await sections in self.$trackSections.values {
                            if !sections.isEmpty {
                                print("‚úÖ –°–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ), –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª")
                                self.scrollToTrackIfExists(pending)
                                break
                            }
                        }
                    }
                }
            }
        }
    }
    
    private func scrollToTrackIfExists(_ url: URL) {
        // 1) –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ —Å—Ä–∞–∑—É
        if let found = self.trackSections
            .flatMap({ $0.tracks })
            .first(where: { $0.resolvedURL == url }) {
            
            print("üéØ –ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É:", found.title ?? found.url.lastPathComponent)
            self.scrollTargetID = found.id
            self.revealedTrackID = found.id
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 4 —Å–µ–∫
            DispatchQueue.main.asyncAfter(deadline: .now() + 4) {
                if self.revealedTrackID == found.id {
                    self.revealedTrackID = nil
                }
            }
        } else {
            // 2) –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∂–¥—ë–º –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ trackSections –∏ –ø—Ä–æ–±—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑
            print("‚ö†Ô∏è –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Å–µ–∫—Ü–∏–π, –∂–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            Task { @MainActor [weak self] in
                guard let self else { return }
                for await sections in self.$trackSections.values {
                    if sections.flatMap({ $0.tracks }).contains(where: { $0.resolvedURL == url }) {
                        print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: —Ç—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π")
                        self.scrollToTrackIfExists(url)
                        break
                    }
                }
            }
        }
    }
    
    
    // MARK: - –ü—Ä–µ—Ñ–µ—Ç—á –∞—Ä—Ç–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
    
    private func prefetchArtwork(urls: [URL], limit: Int = 1) {
        guard !urls.isEmpty else { return }
        Task.detached(priority: .userInitiated) {
            var i = 0
            while i < urls.count {
                let end = min(i + limit, urls.count)
                let chunk = Array(urls[i..<end])
                await withTaskGroup(of: Void.self) { group in
                    for u in chunk {
                        group.addTask { _ = await ArtworkLoader.loadIfNeeded(current: nil, url: u) }
                    }
                }
                i = end
            }
        }
    }
    
    
    // MARK: - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –¥–∞—Ç–µ
    
    func refresh() async {
        await refreshFastStart(firstCount: initialParseCount)
    }
    
    
    // MARK: - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤—ã–µ N, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ, —Å–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
    func refreshFastStart(firstCount: Int) async {
        isLoading = true
        
        let urls = scanFolderURLs(recursive: false)
        let orderMap: [URL:Int] = Dictionary(uniqueKeysWithValues:
                                                urls.enumerated().map { ($0.element, $0.offset) }
        )
        self.lastScannedURLs = urls
        
        let head = Array(urls.prefix(firstCount))
        let tail = Array(urls.dropFirst(firstCount))
        
        // —Ä–∞–Ω–Ω–∏–π –ø—Ä–µ—Ñ–µ—Ç—á –æ–±–ª–æ–∂–µ–∫ –¥–ª—è head
        //prefetchArtwork(urls: head, limit: 6)
        
        // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ N
        let firstSections: [TrackSection] = await Task.detached(priority: .userInitiated) { [head, orderMap] in
            let tracks = await MusicLibraryManager.shared.generateLibraryTracks(from: head)
            return Self.groupTracksByDate(tracks, order: orderMap)
        }.value
        
        withAnimation(nil) {
            self.trackSections = firstSections
            self.isLoading = false
        }
        
        
        // –≥—Ä—É–∑–∏–º tail (—Ç—Ä–µ–∫–∏)
        let restTracks: [LibraryTrack] = await Task.detached(priority: .utility) { [tail] in
            guard !tail.isEmpty else { return [] }
            return await MusicLibraryManager.shared.generateLibraryTracks(from: tail)
        }.value
        
        // –¥–æ–∂–¥–∞–ª–∏—Å—å head-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞—à–∫–∏ –û–î–ò–ù –†–ê–ó
        _ = headCount
        await MainActor.run { self.loadTrackListNamesByURL() }
        
        guard !restTracks.isEmpty else { return }
        
        let allTracks = firstSections.flatMap { $0.tracks } + restTracks
        let grouped = Self.groupTracksByDate(allTracks, order: orderMap)
        await MainActor.run { withAnimation(nil) { self.trackSections = grouped } }
        
        // –ü–†–û–ì–†–ï–í –ú–ï–¢–ê–î–ê–ù–ù–´–• –î–õ–Ø TAIL -> –µ—â—ë –æ–¥–∏–Ω –ø–µ—Ä–µ—Å—á—ë—Ç –ø–ª–∞—à–µ–∫
        Task.detached { [weak self] in
            guard let self else { return }
            await MainActor.run { self.loadTrackListNamesByURL() }
        }
    }
    
    // MARK: - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç—Ä–µ–∫–∏ –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏
    
    func loadTrackListNamesByURL() {
        // –∫–∞–∫–∏–µ URL —Å–µ–π—á–∞—Å –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        let urlsInView = trackSections.flatMap { $0.tracks.map { $0.url } }
        
        // 1) –∫–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        var namesByURL:   [URL: Set<String>] = [:]   // –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ URL
        var namesByStrong: [String: Set<String>] = [:] // title|artist|duration
        var namesBySoft:   [String: Set<String>] = [:] // title|artist
        var namesByStem:   [String: Set<String>] = [:] // –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (fallback)
        
        // 2) –æ–±–æ–π–¥—ë–º –≤—Å–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç—ã –∏ –∑–∞–ø–æ–ª–Ω–∏–º –∫–∞—Ä—Ç—ã
        let metas = TrackListManager.shared.loadTrackListMetas()
        for meta in metas {
            let list = TrackListManager.shared.getTrackListById(meta.id)
            for t in list.tracks {
                namesByURL[t.url, default: []].insert(meta.name)
                
                let k = identityKeys(title: t.title, artist: t.artist, duration: t.duration)
                if !k.strong.isEmpty { namesByStrong[k.strong, default: []].insert(meta.name) }
                if !k.soft.isEmpty   { namesBySoft[k.soft,   default: []].insert(meta.name) }
                
                let stem = fileStem(t.url)
                if !stem.isEmpty     { namesByStem[stem,     default: []].insert(meta.name) }
            }
        }
        
        // 3) —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–∏—Ö URL
        var result: [URL: [String]] = [:]
        result.reserveCapacity(urlsInView.count)
        
        for url in urlsInView {
            var names = namesByURL[url] ?? []
            
            // –±–µ—Ä—ë–º —Ç–µ–≥–∏ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å; –∏–Ω–∞—á–µ –±—É–¥–µ–º –ø–∞–¥–∞—Ç—å –Ω–∞ stem
            let meta = metadataByURL[url]
            let title = meta?.title
            let artist = meta?.artist
            let duration = meta?.duration ?? 0
            let k = identityKeys(title: title, artist: artist, duration: duration)
            
            if let s = namesByStrong[k.strong] { names.formUnion(s) }
            if names.isEmpty, let s2 = namesBySoft[k.soft] { names.formUnion(s2) }
            
            // fallback: –∏–º—è —Ñ–∞–π–ª–∞ ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤
            let stem = fileStem(url)
            if names.isEmpty, let s3 = namesByStem[stem] { names.formUnion(s3) }
            
            result[url] = Array(names).sorted()
        }
        
        trackListNamesByURL = result
    }
    
    
    // MARK: - –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    
    func loadTracksIfNeeded() async {
        guard !didLoad else { return }
        didLoad = true
        await refresh()
    }
    
    
    // MARK: - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
    
    /// –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ –¥–∞—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π)
    nonisolated private static func groupTracksByDate(
        _ tracks: [LibraryTrack],
        order: [URL:Int]? = nil
    ) -> [TrackSection] {
        let calendar = Calendar.current
        
        let grouped = Dictionary(grouping: tracks) { track in
            calendar.startOfDay(for: track.addedDate)
        }
        
        let days = grouped.keys.sorted(by: >)
        
        return days.map { day in
            var items = grouped[day] ?? []
            
            items.sort { a, b in
                // 1) –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–∫–∞–Ω–∞ ‚Äî —Å–∞–º—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                if let oa = order?[a.url], let ob = order?[b.url], oa != ob {
                    return oa < ob
                }
                // 2) –∏–Ω–∞—á–µ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤–µ–µ –≤—ã—à–µ)
                if a.addedDate != b.addedDate { return a.addedDate > b.addedDate }
                // 3) –∏, –Ω–∞ –≤—Å—è–∫–∏–π, –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                return a.url.lastPathComponent.localizedCaseInsensitiveCompare(
                    b.url.lastPathComponent
                ) == .orderedAscending
            }
            
            let title: String = {
                if calendar.isDateInToday(day) { return "–°–µ–≥–æ–¥–Ω—è" }
                if calendar.isDateInYesterday(day) { return "–í—á–µ—Ä–∞" }
                let df = DateFormatter(); df.dateStyle = .medium; df.timeStyle = .none
                return df.string(from: day)
            }()
            
            return TrackSection(
                id: ISO8601DateFormatter().string(from: day),
                title: title,
                tracks: items
            )
        }
    }
    
    
    // MARK: - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ (–æ–¥–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è + —Ä–µ–∫—É—Ä—Å–∏—è)
    
    private func scanFolderURLs(recursive: Bool = false, maxDepth: Int = 1) -> [URL] {
        
        // –æ—Å–Ω–æ–≤–Ω–æ–π –≤—Ö–æ–¥: —Å–∫–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É viewModel'–∞
        return scanFolderURLs(at: folder.url, maxDepth: maxDepth, recursive: recursive)
    }
    
    private func scanFolderURLs(at root: URL, maxDepth: Int, recursive: Bool) -> [URL] {
        var result: [URL] = []
        
        let accessed = root.startAccessingSecurityScopedResource()
        defer { if accessed { root.stopAccessingSecurityScopedResource() } }
        
        do {
            let fm = FileManager.default
            let contents = try fm.contentsOfDirectory(
                at: root,
                includingPropertiesForKeys: [.isDirectoryKey],
                options: [.skipsHiddenFiles]
            )
            
            var subfolders: [URL] = []
            
            for item in contents {
                let isDir = (try? item.resourceValues(forKeys: [.isDirectoryKey]).isDirectory) ?? false
                
                if isDir {
                    if recursive && maxDepth > 0 {
                        subfolders.append(item)
                    }
                } else {
                    let ext = item.pathExtension.lowercased()
                    if allowedAudioExts.contains(ext) {
                        result.append(item)
                    }
                }
            }
            
            // –£—Ö–æ–¥–∏–º –≤ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏, –µ—Å–ª–∏ —Ä–µ–∫—É—Ä—Å–∏—è –≤–∫–ª—é—á–µ–Ω–∞
            if recursive && maxDepth > 0 {
                for sub in subfolders {
                    result.append(
                        contentsOf: scanFolderURLs(at: sub, maxDepth: maxDepth - 1, recursive: true)
                    )
                }
            }
        } catch {
            print("‚ùå scanFolderURLs error:", error)
        }
        
        return result
    }
    
    
    // MARK: - –ù–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤
    
    func loadTrackListNamesIfNeeded() {
        guard !didLoadTrackListNames else { return }
        didLoadTrackListNames = true
        loadTrackListNamesByURL()
    }
    
    // MARK: - –•–µ–ª–ø–µ—Ä—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ —Ç—Ä–µ–∫–ª–∏—Å—Ç—É
    
    private func norm(_ s: String?) -> String {
        guard var t = s?.lowercased().trimmingCharacters(in: .whitespacesAndNewlines), !t.isEmpty else { return "" }
        // —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
        t = t.replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression)
        t = t.replacingOccurrences(of: "[\\p{Punct}]+", with: "", options: .regularExpression)
        return t
    }
    
    // –≤–µ—Ä–Ω—ë–º –¥–≤–∞ –∫–ª—é—á–∞: —Å—Ç—Ä–æ–≥–∏–π (—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é) –∏ –º—è–≥–∫–∏–π (–±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    private func identityKeys(title: String?, artist: String?, duration: Double?) -> (strong: String, soft: String) {
        let nt = norm(title), na = norm(artist)
        let soft = (nt.isEmpty && na.isEmpty) ? "" : "\(nt)|\(na)"
        let d = Int((duration ?? 0).rounded())
        let strong = soft.isEmpty ? "" : "\(soft)|\(d)"
        return (strong, soft)
    }
    
    private func fileStem(_ url: URL) -> String {
        norm(url.deletingPathExtension().lastPathComponent)
    }
    
    func setMetadata(_ meta: TrackMetadataCacheManager.CachedMetadata, for url: URL) {
        metadataByURL[url] = meta
        loadTrackListNamesByURL()   // —Ç–µ–≥–∏ –ø–æ—è–≤–∏–ª–∏—Å—å ‚Üí –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞—à–∫–∏
    }
    
    deinit {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö Combine-–ø–æ–¥–ø–∏—Å–æ–∫ (revealTrack –∏ –¥—Ä.)
        cancellables.forEach { $0.cancel() }
        cancellables.removeAll()
        
        // –£–±–∏—Ä–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤
        if let o = trackListsObserver {
            NotificationCenter.default.removeObserver(o)
        }
        print("üßπ LibraryFolderViewModel –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω –¥–ª—è:", folder.name)
    }
}

