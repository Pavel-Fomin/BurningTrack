//
//  TrackListViewModel.swift
//  TrackList
//
//  ViewModel: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞–º–∏, —Ç—Ä–µ–∫–∞–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º UI –∏–º–ø–æ—Ä—Ç–∞
//
//  Created by Pavel Fomin on 28.04.2025.
//

import Foundation
import SwiftUI
import UIKit

private let selectedTrackListIdKey = "selectedTrackListId"

final class TrackListViewModel: NSObject, ObservableObject {
    @Published var tracks: [Track] = []
    @Published var trackLists: [TrackList] = [] /// –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç—ã (–º–µ—Ç–∞ + —Ç—Ä–µ–∫–∏)
    @Published var currentListId: UUID? { /// –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
        didSet {
            if let id = currentListId {
                UserDefaults.standard.set(id.uuidString, forKey: selectedTrackListIdKey)
            }
        }
    }
    
    @Published var isEditing: Bool = false; /// –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    /// –†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞: –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    enum ImportMode {
        case none
        case newList
        case addToCurrent
    }
    
    @Published var importMode: ImportMode = .none
    
    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    override init() {
        // 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ ID
        let metas = TrackListManager.shared.loadTrackListMetas()
        print("üìÇ –í—Å–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç—ã: \(metas.map { "\($0.name) (\($0.id))" })")
        
        if let savedId = UserDefaults.standard.string(forKey: selectedTrackListIdKey),
           let uuid = UUID(uuidString: savedId),
           metas.contains(where: { $0.id == uuid }) {
            print("üß† –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π ID: \(uuid)")
            self.currentListId = uuid
            TrackListManager.shared.selectTrackList(id: uuid)
        } else {
            print("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            // let defaultList = TrackListManager.shared.getOrCreateDefaultTrackList()
            //self.currentListId = defaultList.id
        }
        
        // 2. –í—ã–∑–æ–≤ super
        super.init()
        
        // 3. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ super ‚Äî –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã —Å self
        loadTracks()
        refreshtrackLists()
    }
    
    /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤ —Å —Ç—Ä–µ–∫–∞–º–∏
    func refreshtrackLists() {
        let metas = TrackListManager.shared.loadTrackListMetas()
        trackLists = metas.reversed().map { meta in
            let tracks = TrackListManager.shared.loadTracks(for: meta.id)
            return TrackList(id: meta.id, name: meta.name, createdAt: meta.createdAt, tracks: tracks)
        }
    }
    
    /// –í—ã–±–æ—Ä —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
    func selectTrackList(id: UUID) {
        currentListId = id
        TrackListManager.shared.selectTrackList(id: id)
        loadTracks()
    }
    
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    func loadTracks() {
        guard let list = TrackListManager.shared.getCurrentTrackList() else {
            print("‚ö†Ô∏è –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        }
        self.tracks = list.tracks.map { $0.asTrack() }
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(tracks.count) —Ç—Ä–µ–∫–æ–≤ –∏–∑ \(list.name)")
    }
    
    /// –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤ —Ç–µ–∫—É—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç
    func importTracks(from urls: [URL]) {
        guard let id = self.currentListId else {
            print("‚ö†Ô∏è –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –∏–º–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            return
        }
        ImportManager().importTracks(from: urls, to: id) { [weak self] imported in
            guard let self = self, let id = self.currentListId else { return }
            var existingTracks = TrackListManager.shared.loadTracks(for: id)
            existingTracks.insert(contentsOf: imported, at: 0)
            TrackListManager.shared.saveTracks(existingTracks, for: id)
            
            DispatchQueue.main.async {
                self.tracks = existingTracks.map { $0.asTrack() }
                self.refreshtrackLists()
                print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: \(imported.count) —Ç—Ä–µ–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            }
        }
    }
    
    /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
    func exportTracks(to folder: URL) {
        guard let list = TrackListManager.shared.getCurrentTrackList() else {
            print("‚ö†Ô∏è –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        }
        
        let availableTracks = list.tracks.filter { $0.isAvailable }
        if availableTracks.isEmpty {
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        }
        
        if let topVC = UIApplication.topViewController() {
            ExportManager.shared.exportViaTempAndPicker(availableTracks, presenter: topVC)
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å topViewController")
        }
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫–ª–∏—Å—Ç
    func clearTrackList(id: UUID) {
        guard id == currentListId else {
            print("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return
        }

        var tracksToClear = TrackListManager.shared.loadTracks(for: id)

        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±–ª–æ–∂–∫–∏
        for track in tracksToClear {
            if let artworkId = track.artworkId {
                ArtworkManager.deleteArtwork(id: artworkId)
                print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞: artwork_\(artworkId).jpg")
            }
        }

        // –û—á–∏—â–∞–µ–º —Ç—Ä–µ–∫–∏
        TrackListManager.shared.saveTracks([], for: id)
        self.tracks = []
        print("üßπ –í—Å–µ —Ç—Ä–µ–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ \(id)")
    }
    
    /// –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ç—Ä–µ–∫–ª–∏—Å—Ç –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º
    func createEmptyTrackListAndSelect() {
        let newList = TrackListManager.shared.createEmptyTrackList()
        self.currentListId = newList.id
        self.refreshtrackLists()
        self.loadTracks()
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –Ω–∞ –∏–º–ø–æ—Ä—Ç —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    func startImportForNewTrackList() {
        print("üñãÔ∏è –í—ã–∑–æ–≤ startImportForNewTrackList. ViewModel: \(ObjectIdentifier(self))")
        importMode = .newList
    }
    
    /// –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    func createNewTrackListViaImport(from urls: [URL]) {
        ImportManager().importTracks(from: urls, to: UUID()) { imported in
            guard !imported.isEmpty else {
                print("‚ö†Ô∏è –¢—Ä–µ–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, —Ç—Ä–µ–∫–ª–∏—Å—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω")
                return
            }
            
            let newList = TrackListManager.shared.createTrackList(from: imported)
            
            DispatchQueue.main.async {
                self.currentListId = newList.id
                self.tracks = imported.map { track in
                    let t = track.asTrack()
                    let isAvailable = FileManager.default.fileExists(atPath: t.url.path)
                    return Track(
                        id: t.id,
                        url: t.url,
                        artist: t.artist,
                        title: t.title,
                        duration: t.duration,
                        fileName: t.fileName,
                        artwork: t.artwork,
                        isAvailable: isAvailable
                    )
                }
                self.refreshtrackLists()
                print("‚úÖ –ù–æ–≤—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω —Å \(imported.count) —Ç—Ä–µ–∫–∞–º–∏")
            }
        }
    }
    
    /// –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    func removeTrack(at offsets: IndexSet) {
        guard let id = currentListId else { return }
        var importedTracks = TrackListManager.shared.loadTracks(for: id)
        
        /// –£–¥–∞–ª—è–µ–º –æ–±–ª–æ–∂–∫–∏
        for index in offsets {
            let track = importedTracks[index]
            if let artworkId = track.artworkId {
                ArtworkManager.deleteArtwork(id: artworkId)
                print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞: artwork_\(artworkId).jpg")
            }
        }
        
        /// –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫–∏
        importedTracks.remove(atOffsets: offsets)
        TrackListManager.shared.saveTracks(importedTracks, for: id)
        self.tracks = importedTracks.map { $0.asTrack() }
        print("üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    }
    
    
    /// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    func moveTrack(from source: IndexSet, to destination: Int) {
        guard let id = currentListId else { return }
        var tracks = TrackListManager.shared.loadTracks(for: id)
        tracks.move(fromOffsets: source, toOffset: destination)
        TrackListManager.shared.saveTracks(tracks, for: id)
        self.tracks = tracks.map { $0.asTrack() }
        print("üîÄ –ü–æ—Ä—è–¥–æ–∫ —Ç—Ä–µ–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω")
    }
    
    /// –£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–∫–ª–∏—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –¥—Ä—É–≥–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    func deleteTrackList(id: UUID) {
        TrackListManager.shared.deleteTrackList(id: id)

        if id == currentListId {
            let metas = TrackListManager.shared.loadTrackListMetas()
            let remaining = metas.filter { $0.id != id }

            if let first = remaining.first {
                selectTrackList(id: first.id)
            } else {
                currentListId = nil
                tracks = []
                print("‚ö†Ô∏è –í—Å–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤
        refreshtrackLists()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ç—Ä–µ–∫–ª–∏—Å—Ç—ã
        if trackLists.isEmpty {
            isEditing = false
            print("‚úã –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –Ω–µ—Ç —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤")
        }
    }
        
        func refreshTrackAvailability() {/// –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
            self.tracks = self.tracks.map { $0.refreshAvailability() }
            print("‚ôªÔ∏è –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–æ–≤")
        }
        
        
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫–ª–∏—Å—Ç
        func canDeleteTrackList(id: UUID) -> Bool {
            // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
            if id == currentListId {
                let tracks = TrackListManager.shared.loadTracks(for: id)
                return tracks.isEmpty
            } else {
                // –ù–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ–≥–¥–∞
                return true
            }
        }

    }

    /// –ü–æ–¥—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
    extension TrackListViewModel {
        var totalDuration: TimeInterval {
            tracks.reduce(0) { $0 + $1.duration }
        }
        
        var formattedTotalDuration: String {
            let formatter = DateComponentsFormatter()
            formatter.zeroFormattingBehavior = .pad
            
            if totalDuration >= 86400 {
                formatter.allowedUnits = [.day, .hour, .minute]
                formatter.unitsStyle = .short
            } else if totalDuration >= 3600 {
                formatter.allowedUnits = [.hour, .minute]
                formatter.unitsStyle = .short
            } else {
                formatter.allowedUnits = [.minute, .second]
                formatter.unitsStyle = .positional
            }
            
            return formatter.string(from: totalDuration) ?? "0:00"
        }
    }

    
    // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    extension TrackListViewModel: UIDocumentPickerDelegate {
        func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
            guard let folderURL = urls.first else {
                print("‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
                return
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ ImportedTrack –ø–æ ID —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
            guard let id = currentListId else {
                print("‚ö†Ô∏è –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
                return
            }
            
            let tracks = TrackListManager.shared.loadTracks(for: id)
            let availableTracks = tracks.filter { $0.isAvailable }
            
            if let topVC = UIApplication.topViewController() {
                ExportManager.shared.exportViaTempAndPicker(availableTracks, presenter: topVC)
            }
        }
    }

