//
//  TrackListViewModel.swift
//  TrackList
//
//  –•—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ç—Ä–µ–∫–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞
//
//  Created by Pavel Fomin on 28.04.2025.
//

import Foundation
import SwiftUI

private let selectedTrackListIdKey = "selectedTrackListId"

final class TrackListViewModel: ObservableObject {
    @Published var tracks: [Track] = []
    
    
    // MARK: - –í—Å–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    @Published var allTrackLists: [TrackList] = []

    // MARK: - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤
    func refreshAllTrackLists() {
        let metas = TrackListManager.shared.loadTrackListMetas()
        allTrackLists = metas.map { meta in
            let tracks = TrackListManager.shared.loadTracks(for: meta.id)
            return TrackList(id: meta.id, name: meta.name, createdAt: meta.createdAt, tracks: tracks)
        }
    }
    
    // MARK: - –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π ID —Å–ø–∏—Å–∫–∞
    @Published var currentListId: UUID {
        didSet {
            UserDefaults.standard.set(currentListId.uuidString, forKey: selectedTrackListIdKey)
        }
    }
    
    init() {
        let metas = TrackListManager.shared.loadTrackListMetas()
        print("üìÇ –í—Å–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç—ã: \(metas.map { "\($0.name) (\($0.id))" })")

        if let savedId = UserDefaults.standard.string(forKey: selectedTrackListIdKey),
           let uuid = UUID(uuidString: savedId),
           metas.contains(where: { $0.id == uuid }) {
            print("üß† –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π ID: \(uuid)")
            self.currentListId = uuid
            TrackListManager.shared.selectTrackList(id: uuid)
        } else {
            print("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π")
            let defaultList = TrackListManager.shared.getOrCreateDefaultTrackList()
            self.currentListId = defaultList.id
            // –í–Ω—É—Ç—Ä–∏ getOrCreateDefaultTrackList —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è selectTrackList
        }

        loadTracks()
        refreshAllTrackLists()
    }
    
    // MARK: - –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
    func selectTrackList(id: UUID) {
        currentListId = id
        TrackListManager.shared.selectTrackList(id: id)
        loadTracks()
    }
    
    // MARK: - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
    func loadTracks() {
        guard let list = TrackListManager.shared.getCurrentTrackList() else {
            print("‚ö†Ô∏è –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        }
        self.tracks = list.tracks.map { $0.asTrack() }
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(tracks.count) —Ç—Ä–µ–∫–æ–≤ –∏–∑ \(list.name)")
    }
    
    // MARK: - –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤ —Ç–µ–∫—É—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç
    func importTracks(from urls: [URL]) {
        ImportManager().importTracks(from: urls, to: currentListId) { imported in
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–∫–∏
            var existingTracks = TrackListManager.shared.loadTracks(for: self.currentListId)

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            existingTracks.append(contentsOf: imported)

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            TrackListManager.shared.saveTracks(existingTracks, for: self.currentListId)

            DispatchQueue.main.async {
                self.tracks = existingTracks.map { $0.asTrack() }
                self.refreshAllTrackLists()
                print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: \(imported.count) —Ç—Ä–µ–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            }
        }
    }
    
    // MARK: - –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–∫–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    func exportTracks(to folder: URL) {
        guard let list = TrackListManager.shared.getCurrentTrackList() else {
            print("‚ö†Ô∏è –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        }
        
        let availableTracks = list.tracks.filter { $0.isAvailable }
        if availableTracks.isEmpty {
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        }
        
        ExportManager().exportTracks(availableTracks, to: folder) { result in
            switch result {
            case .success:
                print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: \(error)")
            }
        }
    }
    
    
    // MARK: - –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    func clearTracks() {
        TrackListManager.shared.saveTracks([], for: currentListId)
        self.tracks = []
        print("üßπ –ü–ª–µ–π–ª–∏—Å—Ç –æ—á–∏—â–µ–Ω")
    }
    
    // MARK: - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç
    func createNewTrackListAndSelect() {
        let newList = TrackListManager.shared.createEmptyTrackList()
        self.currentListId = newList.id
        self.refreshAllTrackLists()
        self.loadTracks()
    }
    
    // MARK: - UI-—Å–æ—Å—Ç–æ—è–Ω–∏—è
    enum ImportMode {
        case none
        case newList
        case addToCurrent
    }

    @Published var importMode: ImportMode = .none

    var isImporting: Bool {
        importMode != .none
    }

    // MARK: - UI-–¥–µ–π—Å—Ç–≤–∏—è
    func startImportForNewTrackList() {
        print("üñãÔ∏è –í—ã–∑–æ–≤ startImportForNewTrackList. –¢–µ–∫—É—â–∏–π trackListViewModel: \(ObjectIdentifier(self))")

        // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∞–π–ª–ò–º–ø–æ—Ä—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç)
        importMode = .none

        // –î–∞–µ–º SwiftUI –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.05) {
            self.importMode = .newList
            print("üìÇ importMode = .newList (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞). ViewModel: \(ObjectIdentifier(self))")
        }
    }
    
    // MARK: - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç
    func createNewTrackListViaImport(from urls: [URL]) {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏
        ImportManager().importTracks(from: urls, to: UUID()) { imported in
            guard !imported.isEmpty else {
                print("‚ö†Ô∏è –¢—Ä–µ–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, —Ç—Ä–µ–∫–ª–∏—Å—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω")
                return
            }

            // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç
            let newList = TrackListManager.shared.createTrackList(from: imported)

            DispatchQueue.main.async {
                self.currentListId = newList.id
                self.tracks = imported.map { $0.asTrack() }
                self.refreshAllTrackLists()
                print("‚úÖ –ù–æ–≤—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω —Å \(imported.count) —Ç—Ä–µ–∫–∞–º–∏")
            }
        }
    }

    // MARK: - –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
    func removeTrack(at offsets: IndexSet) {
        var tracks = TrackListManager.shared.loadTracks(for: currentListId)
        tracks.remove(atOffsets: offsets)
        TrackListManager.shared.saveTracks(tracks, for: currentListId)
        self.tracks = tracks.map { $0.asTrack() }
        print("üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    }

    // MARK: - –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
    func moveTrack(from source: IndexSet, to destination: Int) {
        var tracks = TrackListManager.shared.loadTracks(for: currentListId)
        tracks.move(fromOffsets: source, toOffset: destination)
        TrackListManager.shared.saveTracks(tracks, for: currentListId)
        self.tracks = tracks.map { $0.asTrack() }
        print("üîÄ –ü–æ—Ä—è–¥–æ–∫ —Ç—Ä–µ–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω")
    }
}
