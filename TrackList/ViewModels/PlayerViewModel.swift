//
//  PlayerViewModel.swift
//  TrackList
//
//  ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º —Ç—Ä–µ–∫–æ–≤:
//  - —Å—Ç–∞—Ä—Ç/–ø–∞—É–∑–∞, –ø–µ—Ä–µ–º–æ—Ç–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É/–ø—Ä–µ–¥—ã–¥—É—â–µ–º—É,
//  - –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º,
//  - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Control Center –∏ NowPlayingInfo
//
//  Created by Pavel Fomin on 28.04.2025.
//

import Foundation
import AVFoundation

final class PlayerViewModel: ObservableObject {
    
    // MARK: - –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    
    @Published var currentTrackDisplayable: (any TrackDisplayable)?               /// –¢–µ–∫—É—â–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π —Ç—Ä–µ–∫
    @Published var isPlaying: Bool = false            /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    @Published var currentTime: TimeInterval = 0.0    /// –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    @Published var trackDuration: TimeInterval = 0.0  /// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞

    let playerManager = PlayerManager()               /// –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–ª–µ–µ—Ä–∞
    let trackListViewModel: TrackListViewModel        /// ViewModel —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤
    
    
    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
       
       init(trackListViewModel: TrackListViewModel) {
           self.trackListViewModel = trackListViewModel
           
           NotificationCenter.default.addObserver(
               forName: .trackDurationUpdated,
               object: nil,
               queue: .main
           ) { [weak self] notification in
               if let duration = notification.userInfo?["duration"] as? TimeInterval {
                   self?.trackDuration = duration
               }
           }
           
           NotificationCenter.default.addObserver(
               forName: .trackDidFinish,
               object: nil,
               queue: .main
           ) { [weak self] _ in
               Task { await self?.playNextTrack() }
           }

           playerManager.setupRemoteCommandCenter(
               onPlay: { [weak self] in
                   DispatchQueue.main.async {
                       self?.togglePlayPause()
                   }
               },
               onPause: { [weak self] in
                   DispatchQueue.main.async {
                       self?.togglePlayPause()
                   }
               },
               onNext: { [weak self] in
                   DispatchQueue.main.async {
                       self?.playNextTrack()
                   }
               },
               onPrevious: { [weak self] in
                   DispatchQueue.main.async {
                       self?.playPreviousTrack()
                   }
               }
           )
       }

       
       // MARK: - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
       
       func play(track: any TrackDisplayable) {
           print("üß† PlayerViewModel: play(track:) –≤—ã–∑–≤–∞–Ω —Å", track.fileName)

           if let current = currentTrackDisplayable,
              current.fileName == track.fileName {
               playerManager.playCurrent()
           } else {
               playerManager.stopAccessingCurrentTrack()
               currentTrackDisplayable = track
               playerManager.play(track: track)

               playerManager.updateNowPlayingInfo(
                   track: track,
                   currentTime: 0,
                   duration: trackDuration
               )

               DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                   self.playerManager.updateNowPlayingInfo(
                       track: track,
                       currentTime: 0,
                       duration: self.trackDuration
                   )
               }
           }

           playerManager.observeProgress { [weak self] time in
               self?.currentTime = time
               if let self = self {
                   self.playerManager.updatePlaybackTimeOnly(
                       currentTime: time,
                       isPlaying: self.isPlaying
                   )
               }
           }

           isPlaying = true
       }

       
       // MARK: - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
       
       func togglePlayPause() {
           if isPlaying {
               playerManager.pause()
           } else {
               guard currentTrackDisplayable != nil else { return }
               playerManager.playCurrent()
           }
           isPlaying.toggle()
       }
       
       func seek(to time: TimeInterval) {
           playerManager.seek(to: time)
           self.currentTime = time
       }
       
       
       // MARK: - –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ç—Ä–µ–∫–∞–º–∏

       @MainActor
       func playNextTrack() {
           guard let current = currentTrackDisplayable as? Track else { return }
           let tracks = trackListViewModel.tracks
           guard let index = tracks.firstIndex(of: current),
                 index + 1 < tracks.count else {
               print("‚è≠ –°–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –Ω–µ—Ç")
               return
           }

           let nextTrack = tracks[index + 1]
           play(track: nextTrack)
       }
       
       @MainActor
       func playPreviousTrack() {
           guard let current = currentTrackDisplayable as? Track else { return }
           let tracks = trackListViewModel.tracks
           guard let index = tracks.firstIndex(of: current),
                 index - 1 >= 0 else {
               print("‚èÆ –ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –Ω–µ—Ç")
               return
           }

           let previousTrack = tracks[index - 1]
           play(track: previousTrack)
       }
       
       
       // MARK: - –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
       
       deinit {
           playerManager.removeTimeObserver()
           NotificationCenter.default.removeObserver(self)
       }
   }
