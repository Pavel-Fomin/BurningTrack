//
//  PlayerViewModel.swift
//  TrackList
//
//  ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º —Ç—Ä–µ–∫–æ–≤:
//  - —Å—Ç–∞—Ä—Ç/–ø–∞—É–∑–∞, –ø–µ—Ä–µ–º–æ—Ç–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É/–ø—Ä–µ–¥—ã–¥—É—â–µ–º—É,
//  - –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º,
//  - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Control Center –∏ NowPlayingInfo
//
//  Created by Pavel Fomin on 28.04.2025.
//

import Foundation
import AVFoundation

final class PlayerViewModel: ObservableObject {
    // MARK: - –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    
    @Published var currentTrack: Track?               /// –¢–µ–∫—É—â–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π —Ç—Ä–µ–∫
    @Published var isPlaying: Bool = false            /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    @Published var currentTime: TimeInterval = 0.0    /// –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    @Published var trackDuration: TimeInterval = 0.0  /// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞

    let playerManager = PlayerManager()               /// –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–ª–µ–µ—Ä–∞
    let trackListViewModel: TrackListViewModel        /// ViewModel —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤
    
    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    
    init(trackListViewModel: TrackListViewModel) {
        self.trackListViewModel = trackListViewModel
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞
        NotificationCenter.default.addObserver(
            forName: .trackDurationUpdated,
            object: nil,
            queue: .main
        ) { [weak self] notification in
            if let duration = notification.userInfo?["duration"] as? TimeInterval {
                self?.trackDuration = duration
            }
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        NotificationCenter.default.addObserver(
            forName: .trackDidFinish,
            object: nil,
            queue: .main
        ) { [weak self] _ in
            Task { await self?.playNextTrack() }
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ Control Center
        playerManager.setupRemoteCommandCenter(
            onPlay: { [weak self] in
                DispatchQueue.main.async {
                    self?.togglePlayPause()
                }
            },
            onPause: { [weak self] in
                DispatchQueue.main.async {
                    self?.togglePlayPause()
                }
            },
            onNext: { [weak self] in
                DispatchQueue.main.async {
                    self?.playNextTrack()
                }
            },
            onPrevious: { [weak self] in
                DispatchQueue.main.async {
                    self?.playPreviousTrack()
                }
            }
        )
    }

    // MARK: - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
    func play(track: Track) {
        print("üß† PlayerViewModel: play(track:) –≤—ã–∑–≤–∞–Ω —Å", track.fileName)
        
        // –ï—Å–ª–∏ —Ç—Ä–µ–∫ —É–∂–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if currentTrack?.url == track.url {
            playerManager.playCurrent()
        } else {
            playerManager.stopAccessingCurrentTrack()
            playerManager.play(track: track)
            currentTrack = track
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è Control Center
            playerManager.updateNowPlayingInfo(
                track: track,
                currentTime: 0,
                duration: trackDuration
            )
            
            // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–Ω–∞ —Å–ª—É—á–∞–π –∑–∞–ø–æ–∑–¥–∞–ª–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                self.playerManager.updateNowPlayingInfo(
                    track: track,
                    currentTime: 0,
                    duration: self.trackDuration
                )
            }
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            playerManager.observeProgress { [weak self] time in
                self?.currentTime = time
                if let self = self {
                    self.playerManager.updatePlaybackTimeOnly(
                        currentTime: time,
                        isPlaying: self.isPlaying
                    )
                    
                }
            }
        }

        isPlaying = true
    }

    // MARK: - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    
    /// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ/–ø–∞—É–∑—É
    func togglePlayPause() {
        if isPlaying {
            playerManager.pause()
        } else {
            guard currentTrack != nil else { return }
            playerManager.playCurrent()
        }
        isPlaying.toggle()
    }
    
    /// –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    func seek(to time: TimeInterval) {
        playerManager.seek(to: time)
        self.currentTime = time
    }
    
    // MARK: - –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ç—Ä–µ–∫–∞–º–∏

    /// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
    @MainActor
    func playNextTrack() {
        guard let current = currentTrack else { return }
        let tracks = trackListViewModel.tracks
        guard let index = tracks.firstIndex(of: current),
              index + 1 < tracks.count else {
            print("‚è≠ –°–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –Ω–µ—Ç")
            return
        }

        let nextTrack = tracks[index + 1]
        play(track: nextTrack)
    }
    
    /// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç—Ä–µ–∫—É
    @MainActor
    func playPreviousTrack() {
        guard let current = currentTrack else { return }
        let tracks = trackListViewModel.tracks
        guard let index = tracks.firstIndex(of: current),
              index - 1 >= 0 else {
            print("‚èÆ –ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –Ω–µ—Ç")
            return
        }

        let previousTrack = tracks[index - 1]
        play(track: previousTrack)
    }
    
    // MARK: - –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    
    /// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    deinit {
        playerManager.removeTimeObserver()
        NotificationCenter.default.removeObserver(self)
    }
}
