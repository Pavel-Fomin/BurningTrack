//
//  MusicLibraryManager.swift
//  TrackList
//
//  Created by Pavel Fomin on 22.06.2025.
//

import Foundation
import UniformTypeIdentifiers
import Combine

final class MusicLibraryManager: ObservableObject {
    static let shared = MusicLibraryManager()
    
    private let bookmarkKey = "musicLibraryBookmark"
    private var isAccessing = false
    
    // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    private var appDirectory: URL? {
        FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first
    }
    
    private var bookmarkFileURL: URL? {
        appDirectory?.appendingPathComponent("music_library_bookmark.json")
    }
    
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ bookmarkData –≤ —Ñ–∞–π–ª
    private func saveBookmarkDataToFile(_ data: Data) {
        guard let url = bookmarkFileURL else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É bookmark")
            return
        }
        
        do {
            try FileManager.default.createDirectory(at: url.deletingLastPathComponent(), withIntermediateDirectories: true)
            try data.write(to: url)
            print("üíæ BookmarkData —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ bookmarkData –≤ —Ñ–∞–π–ª: \(error)")
        }
    }
    
    private func loadBookmarkDataFromFile() -> Data? {
        guard let url = bookmarkFileURL else { return nil }
        return try? Data(contentsOf: url)
    }
    
    init() {
        print("üé¨ MusicLibraryManager init ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø")
    }
    
    @Published var folderURL: URL?
    @Published var tracks: [URL] = []
    
    
    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    func scanMusicFolder() {
        guard let folderURL else {
            print("‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            DispatchQueue.main.async {
                self.tracks = []
            }
            return
        }
        
        do {
            let fileManager = FileManager.default
            let contents = try fileManager.contentsOfDirectory(
                at: folderURL,
                includingPropertiesForKeys: nil,
                options: [.skipsHiddenFiles]
            )
            
            let supportedExtensions = ["mp3", "flac", "wav", "aiff", "aac", "m4a", "ogg"]
            let audioFiles = contents.filter { url in
                let ext = url.pathExtension.trimmingCharacters(in: .whitespacesAndNewlines).lowercased()
                return supportedExtensions.contains(ext)
            }
            
            DispatchQueue.main.async {
                self.tracks = audioFiles
            }
            
            print("üéµ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–∞–ø–∫–µ: \(audioFiles.count)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: \(error)")
            DispatchQueue.main.async {
                self.tracks = []
            }
        }
    }
    
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç bookmark
    func saveBookmark(for url: URL) {
        if url.startAccessingSecurityScopedResource() {
            do {
                let bookmarkData = try url.bookmarkData(
                    options: [],
                    includingResourceValuesForKeys: nil,
                    relativeTo: nil
                )
                saveBookmarkDataToFile(bookmarkData)
                
                // ‚úÖ –í—Å—ë –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ main-–ø–æ—Ç–æ–∫–∞
                DispatchQueue.main.async {
                    self.folderURL = url
                    self.tracks = [] // –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤
                    self.scanMusicFolder() // –°–∫–∞–Ω –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
                }
            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å bookmarkData: \(error)")
            }
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ")
        }
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç bookmark –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    func restoreAccess() {
        guard let data = loadBookmarkDataFromFile(), !isAccessing else {
            print("‚ÑπÔ∏è Bookmark-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø")
            return
        }

        var isStale = false

        do {
            let url = try URL(
                resolvingBookmarkData: data,
                options: [],
                relativeTo: nil,
                bookmarkDataIsStale: &isStale
            )

            if url.startAccessingSecurityScopedResource() {
                isAccessing = true // üëà –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω
                DispatchQueue.main.async {
                    self.folderURL = url
                    print("‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ —Ñ–æ–Ω–æ—Ç–µ–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: \(url.lastPathComponent)")
                    self.scanMusicFolder()
                }
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ bookmark: \(error)")
        }
    }
}
