//
//  MusicLibraryManager.swift
//  TrackList
//
//  –£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º –ø–∞–ø–∫–∞–º —Ñ–æ–Ω–æ—Ç–µ–∫–∏, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–∞
//
//  Created by Pavel Fomin on 22.06.2025.
//

import Foundation
import UniformTypeIdentifiers
import Combine
import AVFoundation
import UIKit


final class MusicLibraryManager: ObservableObject {
    
    /// –°–∏–Ω–≥–ª—Ç–æ–Ω
    static let shared = MusicLibraryManager()
    
    /// –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ä–∞–∑—É –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –ø–∞–ø–∫–∞–º
    init() {
        restoreAccess()
    }
    
    /// –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ importedTrackCache
    private let cacheQueue = DispatchQueue(label: "importedTrackCache.queue")
    
    
    // MARK: - Bookmark –∏ –∫—ç—à
    
    /// –ö–ª—é—á –¥–ª—è UserDefaults (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–ª—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?)
    private let bookmarkKey = "musicLibraryBookmark"
    
    /// –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å startAccessing
    private var isAccessing = false
    
    /// –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è /Documents
    private var appDirectory: URL? {
        FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first
    }
    
    /// –ö—ç—à –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏)
    private var importedTrackCache: [String: ImportedTrack] = [:]
    
    /// –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è bookmarkData –≤—Å–µ—Ö –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
    private static var bookmarksFileURL: URL {
        let folder = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        return folder.appendingPathComponent("music_bookmarks.json")
    }
    
    
// MARK: - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ bookmarkData –≤ —Ñ–∞–π–ª
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π bookmark –≤ –æ–±—â–∏–π bookmarks.json, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    func saveBookmarkDataToFile(_ newData: Data) {
        let url = Self.bookmarksFileURL
        
        var existingDataArray: [Data] = []
        
        // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ bookmarks
        if let data = try? Data(contentsOf: url),
           let array = try? JSONDecoder().decode([Data].self, from: data) {
            existingDataArray = array
        }
        
        // –î–æ–±–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ bookmark –µ—â—ë –Ω–µ—Ç
        if !existingDataArray.contains(newData) {
            existingDataArray.append(newData)
        }
        
        // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        do {
            let encoder = makePrettyJSONEncoder()
            let newData = try encoder.encode(existingDataArray)
            try newData.write(to: url)
            print("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ \(existingDataArray.count) –ø–∞–ø–æ–∫ –≤ bookmarks.json")
        } catch {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å bookmarkData: \(error)")
        }
    }
    
    
// MARK: - –ü—É–±–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    @Published var folderURL: URL?                       /// –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–ø–∫–∞ (–µ—Å–ª–∏ –æ–¥–Ω–∞)
    @Published var tracks: [URL] = []                    /// –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ (–ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫)
    @Published var rootFolder: LibraryFolder?            /// –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ —Å–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    @Published var attachedFolders: [LibraryFolder] = [] /// –ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–µ–≤—å—è–º–∏
    
    
// MARK: -  –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –ø–∞–ø–∫–∏ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
    
    /// –°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ LibraryFolder –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    /// - Parameter folderURL: –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
    /// - Returns: LibraryFolder —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–¥–ø–∞–ø–æ–∫
    func buildFolderTree(from folderURL: URL) -> LibraryFolder {
        let fileManager = FileManager.default
        let folderName = folderURL.lastPathComponent
        
        var subfolders: [LibraryFolder] = []
        var audioFiles: [URL] = []
        
        if let contents = try? fileManager.contentsOfDirectory(at: folderURL, includingPropertiesForKeys: [.isDirectoryKey], options: [.skipsHiddenFiles]) {
            for item in contents {
                var isDirectory: ObjCBool = false
                if fileManager.fileExists(atPath: item.path, isDirectory: &isDirectory), isDirectory.boolValue {
                    
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–ø–∞–ø–∫—É
                    let subfolder = buildFolderTree(from: item)
                    subfolders.append(subfolder)
                } else {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                    let ext = item.pathExtension.lowercased()
                    if ["mp3", "flac", "wav", "aiff", "aac", "m4a", "ogg"].contains(ext) {
                        audioFiles.append(item)
                    }
                }
            }
        }
        
        return LibraryFolder(name: folderName, url: folderURL, subfolders: subfolders, audioFiles: audioFiles)
    }
    
    
// MARK: - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç bookmark
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç bookmark –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –∏ —Å—Ç—Ä–æ–∏—Ç –ø–æ –Ω–µ–π –¥–µ—Ä–µ–≤–æ
    func saveBookmark(for url: URL) {
        if url.startAccessingSecurityScopedResource() {
            do {
                let bookmarkData = try url.bookmarkData(
                    options: [],
                    includingResourceValuesForKeys: nil,
                    relativeTo: nil
                )
                saveBookmarkDataToFile(bookmarkData)
                
                DispatchQueue.main.async {
                    self.folderURL = url
                    self.tracks = [] /// –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
                    self.rootFolder = self.buildFolderTree(from: url)
                }
            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å bookmarkData: \(error)")
            }
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ")
        }
    }
    
    
// MARK: - –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Å–∏–≤–∞ bookmarkData –∏–∑ —Ñ–∞–π–ª–∞
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ bookmarkData –∏–∑ JSON
    private func loadBookmarkDataFromFile() -> [Data]? {
        let url = Self.bookmarksFileURL
        
        guard let data = try? Data(contentsOf: url) else {
            print("‚ö†Ô∏è –§–∞–π–ª –∑–∞–∫–ª–∞–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: \(url.lastPathComponent)")
            return nil
        }
        
        do {
            let array = try JSONDecoder().decode([Data].self, from: data)
            return array
        } catch {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å bookmarkData: \(error)")
            return nil
        }
    }
    
    
// MARK: - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–Ω–µ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º –ø–∞–ø–∫–∞–º

    /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º –ø–∞–ø–∫–∞–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    func restoreAccess() {
        
        // –û—á–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            attachedFolders = []
            tracks = []
        
        guard let dataArray = loadBookmarkDataFromFile() else {
            print("‚ÑπÔ∏è Bookmarks –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        }
        
        var urls: [URL] = []
        
        for data in dataArray {
            var isStale = false
            do {
                let url = try URL(
                    resolvingBookmarkData: data,
                    options: [.withoutUI], ///—É–±—Ä–∞–ª–∏ .withSecurityScope ‚Äî –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ iOS
                    relativeTo: nil,
                    bookmarkDataIsStale: &isStale
                )
                
                if url.startAccessingSecurityScopedResource() {
                    print("‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: \(url.lastPathComponent)")
                    urls.append(url)
                } else {
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ: \(url.lastPathComponent)")
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: \(error)")
            }
        }
        
        // –°–æ–∑–¥–∞—ë–º –¥–µ—Ä–µ–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
        for url in urls {
            DispatchQueue.main.async {
                let newFolder = self.buildFolderTree(from: url)
                self.attachedFolders.append(newFolder)
                self.tracks.append(contentsOf: newFolder.audioFiles)
            }
        }
    }
    
// MARK: - –£–¥–∞–ª–µ–Ω–∏–µ bookmarkData –ø–æ URL
    
    /// –£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π bookmark –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤ UI
    func removeBookmark(for folderURL: URL) {
        let url = Self.bookmarksFileURL

        guard let data = try? Data(contentsOf: url),
              var existing = try? JSONDecoder().decode([Data].self, from: data) else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å bookmarkData –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π bookmark –ø–æ url
        existing.removeAll { data in
            var isStale = false
            if let resolved = try? URL(
                resolvingBookmarkData: data,
                options: [.withoutUI],
                relativeTo: nil,
                bookmarkDataIsStale: &isStale
            ) {
                return resolved == folderURL
            }
            return false
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        do {
            let newData = try JSONEncoder().encode(existing)
            try newData.write(to: url)
            print("üóëÔ∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞–ø–∫—É –∏–∑ bookmarks: \(folderURL.lastPathComponent)")
        } catch {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ bookmarks")
        }

        // –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –≤ UI
        DispatchQueue.main.async {
            self.attachedFolders.removeAll { $0.url == folderURL }
            self.tracks = self.attachedFolders.flatMap { $0.audioFiles }
        }
    }
    
    
// MARK: - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è LibraryTrack –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ URL-–æ–≤ –≤ –º–∞—Å—Å–∏–≤ LibraryTrack, –≤–∫–ª—é—á–∞—è –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–≥–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ bookmark
    func generateLibraryTracks(from urls: [URL]) async -> [LibraryTrack] {
        await withTaskGroup(of: LibraryTrack?.self) { group in
            for url in urls {
                group.addTask { [self] in
                    let accessed = url.startAccessingSecurityScopedResource()
                    defer {
                        if accessed {
                            url.stopAccessingSecurityScopedResource()
                        }
                    }
                    // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ AVAsset
                    let asset = AVURLAsset(url: url)
                    let duration = try? await asset.load(.duration)
                    let durationSeconds = duration.map(CMTimeGetSeconds)
                    
                    // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    let resourceValues = try? url.resourceValues(forKeys: [.creationDateKey, .contentModificationDateKey])
                    let addedDate = resourceValues?.creationDate ?? resourceValues?.contentModificationDate ?? Date()
                    
                    // –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏
                    let metadata = try? await MetadataParser.parseMetadata(from: url)
                    
                    // –ü–∞—Ä—Å–∏–º –æ–±–ª–æ–∂–∫—É
                    let artworkBase64 = metadata?.artworkData?.base64EncodedString()

                    
                    // Bookmark –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
                    let bookmarkData = try? url.bookmarkData(options: [], includingResourceValuesForKeys: nil, relativeTo: nil)
                    let bookmarkBase64 = bookmarkData?.base64EncodedString() ?? ""

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
                    let imported: ImportedTrack
                    let filePath = url.path
                    
                    let cached: ImportedTrack? = cacheQueue.sync {
                        importedTrackCache[filePath]
                    }
                    
                    if let cached {
                        imported = cached
                    
                    } else {
                        let newTrack = ImportedTrack(
                            id: UUID(uuidString: url.lastPathComponent) ?? UUID(),
                            fileName: url.lastPathComponent,
                            filePath: filePath,
                            orderPrefix: "",
                            title: metadata?.title,
                            artist: metadata?.artist,
                            album: nil,
                            duration: metadata?.duration ?? durationSeconds ?? 0,
                            bookmarkBase64: bookmarkBase64,
                        )
                        cacheQueue.sync {
                            importedTrackCache[filePath] = newTrack
                        }
                            imported = newTrack
                    }
                    
                    let resolvedURL = SecurityScopedBookmarkHelper.resolveURL(from: bookmarkBase64) ?? url
                    let isAvailable = FileManager.default.fileExists(atPath: resolvedURL.path)

                    return LibraryTrack(
                        url: url,
                        resolvedURL: resolvedURL,
                        isAvailable: isAvailable,
                        bookmarkBase64: bookmarkBase64,
                        title: metadata?.title,
                        artist: metadata?.artist,
                        duration: metadata?.duration ?? durationSeconds ?? 0,
                        artwork: metadata?.artworkData
                            .flatMap { UIImage(data: $0) }
                            .map { normalize($0) },
                        addedDate: addedDate,
                        original: imported
                    )
                }
            }

            var results: [LibraryTrack] = []
            for await result in group {
                if let track = result {
                    results.append(track)
                }
            }
            return results
        }
    }
}
