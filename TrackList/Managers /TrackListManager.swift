//
//  TrackListManager.swift
//  TrackList
//
//  –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞–º–∏:
//  - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
//  - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–º
//  - –°–æ–∑–¥–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
//
//  Created by Pavel Fomin on 27.04.2025.
//

import Foundation

final class TrackListManager {
    
    /// –°–∏–Ω–≥–ª—Ç–æ–Ω-—ç–∫–∑–µ–º–ø–ª—è—Ä
    static let shared = TrackListManager()
    private init() {}

    
// MARK: - –ü—É—Ç–∏
    
    /// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /Documents
    private var documentsDirectory: URL? {
        FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å —Ç—Ä–µ–∫–∞–º–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    /// - Parameters:
    /// - id: UUID —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
    /// - isDraft: true ‚Äî –µ—Å–ª–∏ —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫ (draft)
    private func urlForTrackList(id: UUID) -> URL? {
        guard let directory = documentsDirectory else { return nil }
        let fileName = "tracklist_\(id.uuidString).json"
        return directory.appendingPathComponent(fileName)
    }

    
// MARK: - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (tracklists.json)

    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤ (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö) –∏–∑ tracklists.json
    func loadTrackListMetas() -> [TrackListMeta] {
        guard let url = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
            .first?.appendingPathComponent("tracklists.json"),
              let data = try? Data(contentsOf: url),
              let metas = try? JSONDecoder().decode([TrackListMeta].self, from: data) else {
            return []
        }
        return metas
    }

    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤ (–º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é) –≤ tracklists.json
    func saveTrackListMetas(_ metas: [TrackListMeta]) {
        guard let url = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
            .first?.appendingPathComponent("tracklists.json") else { return }

        let encoder = makePrettyJSONEncoder()
        if let data = try? encoder.encode(metas) {
            try? data.write(to: url, options: .atomic)
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–µ–∫–ª–∏—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
    func trackListExists(id: UUID) -> Bool {
        return loadTrackListMetas().contains(where: { $0.id == id })
    }

    
// MARK: - –¢—Ä–µ–∫–∏ (tracklist_<id>.json)

    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ ID —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
    /// - Parameters:
    /// - id: ID –ø–ª–µ–π–ª–∏—Å—Ç–∞
    /// - isDraft: –ï—Å–ª–∏ true ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    /// - Returns: –ú–∞—Å—Å–∏–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    func loadTracks(for id: UUID) -> [ImportedTrack] {
        guard
            let url = urlForTrackList(id: id),
            let data = try? Data(contentsOf: url),
            let tracks = try? JSONDecoder().decode([ImportedTrack].self, from: data)
        else {
            return []
        }
        return tracks
    }

    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ ID —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞ (–≤–∫–ª—é—á–∞—è draft)
    func saveTracks(_ tracks: [ImportedTrack], for id: UUID) {
        guard let url = urlForTrackList(id: id) else { return }

        let encoder = makePrettyJSONEncoder()
        if let data = try? encoder.encode(tracks) {
            try? data.write(to: url, options: .atomic)
        }
    }

    
// MARK: - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–µ–∫–ª–∏—Å—Ç –ø–æ –µ–≥–æ ID
    
    // - Parameter id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
    // - Returns: –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç TrackList —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Ç—Ä–µ–∫–∞–º–∏
    // - Note: –ï—Å–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π (fatalError)
    func getTrackListById(_ id: UUID) -> TrackList {
        let metas = loadTrackListMetas()
        guard let meta = metas.first(where: { $0.id == id }) else {
            fatalError("–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
        let tracks = loadTracks(for: id)
        return TrackList(id: id, name: meta.name, createdAt: meta.createdAt, tracks: tracks)
    }
    

// MARK: - –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤

    /// –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    @discardableResult
    func createTrackList(from importedTracks: [ImportedTrack]) -> TrackList {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yy, HH:mm"
        let name = formatter.string(from: Date())

        let newId = UUID()
        let createdAt = Date()

        saveTracks(importedTracks, for: newId)

        var metas = loadTrackListMetas()
        let newMeta = TrackListMeta(id: newId, name: name, createdAt: createdAt)
        metas.append(newMeta)
        
        saveTrackListMetas(metas)

        return TrackList(id: newId, name: name, createdAt: createdAt, tracks: importedTracks)
    }
    
    /// –°–æ–∑–¥–∞—ë—Ç —Ç—Ä–µ–∫–ª–∏—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞)
    func createTrackList(from tracks: [ImportedTrack], withName name: String) -> TrackList {
        let id = UUID()
        let createdAt = Date()
        let meta = TrackListMeta(id: id, name: name, createdAt: createdAt)

        saveTrackListMeta(meta)
        saveTracks(tracks, for: id)

        return TrackList(id: id, name: name, createdAt: createdAt, tracks: tracks)
    }
    
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–∏–Ω TrackListMeta –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ (tracklists.json)
    func saveTrackListMeta(_ meta: TrackListMeta) {
        var current = loadTrackListMetas()
        current.append(meta)
        saveTrackListMetas(current)
    }

    
// MARK: - –£–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ

    /// –£–¥–∞–ª—è–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ ID: —Ç—Ä–µ–∫–∏, –º–µ—Ç–∞, –æ–±–ª–æ–∂–∫–∏
    func deleteTrackList(id: UUID) {
        
        // –£–¥–∞–ª—è–µ–º –æ–±–ª–æ–∂–∫–∏
        let tracks = loadTracks(for: id)
        for track in tracks {
            if let artworkId = track.artworkId {
                ArtworkManager.deleteArtwork(id: artworkId)
            }
        }

        // –£–¥–∞–ª—è–µ–º JSON-—Ñ–∞–π–ª —Å —Ç—Ä–µ–∫–∞–º–∏
        if let fileURL = documentsDirectory?.appendingPathComponent("tracklist_\(id.uuidString).json") {
            do {
                try FileManager.default.removeItem(at: fileURL)
                print("‚úÖ –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: \(fileURL.lastPathComponent)")
            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: \(error)")
            }
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–∞
        var metas = loadTrackListMetas()
        metas.removeAll { $0.id == id }
        saveTrackListMetas(metas)
        print("üóëÔ∏è –¢—Ä–µ–∫–ª–∏—Å—Ç —Å ID \(id) —É–¥–∞–ª—ë–Ω")
    }

    /// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫–ª–∏—Å—Ç –ø–æ ID
    func renameTrackList(id: UUID, to newName: String) {
        var metas = loadTrackListMetas()
        guard let index = metas.firstIndex(where: { $0.id == id }) else { return }

        metas[index].name = newName
        saveTrackListMetas(metas)
    }

    
// MARK: - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤

    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç—ã (–æ—Ç–¥–µ–ª—å–Ω–æ JSON —Å —Ç—Ä–µ–∫–∞–º–∏ –∏ tracklists.json —Å –º–µ—Ç–∞)
    func saveTrackLists(_ trackLists: [TrackList]) {
        for list in trackLists {
            saveTracks(list.tracks, for: list.id)
        }

        let metas = trackLists.map {
            TrackListMeta(id: $0.id, name: $0.name, createdAt: $0.createdAt)
        }

        saveTrackListMetas(metas)

        print("‚úÖ –í—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–æ—Ç–¥–µ–ª—å–Ω–æ —Ç—Ä–µ–∫–∏ –∏ –º–µ—Ç–∞)")
    }
    
    
// MARK: - –û—Ç–ª–∞–¥–∫–∞

    /// –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç—ã –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    func printTrackLists() {
        let metas = loadTrackListMetas()
        print("\n===== –°–û–î–ï–†–ñ–ò–ú–û–ï –í–°–ï–• –¢–†–ï–ö–õ–ò–°–¢–û–í =====")
        for meta in metas {
            let tracks = loadTracks(for: meta.id)
            print("–ü–ª–µ–π–ª–∏—Å—Ç: \(meta.name), ID: \(meta.id)")
            for track in tracks {
                print("‚Äî \(track.fileName) (\(track.artist ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç") ‚Äî \(track.title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫")), duration: \(track.duration)")
            }
        }
    }
    
}

