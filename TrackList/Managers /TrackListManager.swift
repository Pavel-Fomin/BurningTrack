//
//  TrackListManager.swift
//  TrackList
//
//  –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞–º–∏:
//  - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
//  - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–º
//  - –°–æ–∑–¥–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
//
//  Created by Pavel Fomin on 27.04.2025.
//

import Foundation

final class TrackListManager {
    static let shared = TrackListManager()  /// Singleton –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    private init() {}

    
// MARK: - –ü—É—Ç–∏
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É /Documents
    private var documentsDirectory: URL? {
        FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è JSON-—Ñ–∞–π–ª–∞ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
    private func urlForTrackList(id: UUID, isDraft: Bool = false) -> URL? {
        guard let directory = documentsDirectory else { return nil }
        let fileName = isDraft ? "tracklist_draft.json" : "tracklist_\(id.uuidString).json"
        return directory.appendingPathComponent(fileName)
    }

    
// MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
    
       // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ ID. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç "–ß–µ—Ä–Ω–æ–≤–∏–∫"
       func initializeDefaultTrackListIfNeeded() {
           var metas = loadTrackListMetas()

           // 1. –°–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
           if metas.isEmpty {
               let id = UUID()
               let meta = TrackListMeta(id: id, name: "–ß–µ—Ä–Ω–æ–≤–∏–∫", createdAt: Date(), isDraft: true)
               metas.append(meta)
               saveTrackListMetas(metas)
               saveTracks([], for: id, isDraft: true)
               selectedTrackListId = id
               print("üìÑ –°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç")
               return
           }

           // 2. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π ID –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
           if selectedTrackListId == nil {
               selectedTrackListId = metas.first?.id
               print("üìå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: \(selectedTrackListId?.uuidString ?? "nil")")
           }
       }
   
    
// MARK: - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (tracklists.json)

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤ –∏–∑ tracklists.json
    func loadTrackListMetas() -> [TrackListMeta] {
        guard let url = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
            .first?.appendingPathComponent("tracklists.json"),
              let data = try? Data(contentsOf: url),
              let metas = try? JSONDecoder().decode([TrackListMeta].self, from: data) else {
            return []
        }
        return metas
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤ –≤ tracklists.json
    func saveTrackListMetas(_ metas: [TrackListMeta]) {
        guard let url = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
            .first?.appendingPathComponent("tracklists.json") else { return }

        if let data = try? JSONEncoder().encode(metas) {
            try? data.write(to: url, options: .atomic)
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
    func trackListExists(id: UUID) -> Bool {
        return loadTrackListMetas().contains(where: { $0.id == id })
    }

    
// MARK: - –¢—Ä–µ–∫–∏ (tracklist_<id>.json)

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ ID –ø–ª–µ–π–ª–∏—Å—Ç–∞
    func loadTracks(for id: UUID, isDraft: Bool = false) -> [ImportedTrack] {
        guard let url = urlForTrackList(id: id, isDraft: isDraft),
              let data = try? Data(contentsOf: url),
              let tracks = try? JSONDecoder().decode([ImportedTrack].self, from: data) else {
            return []
        }
        return tracks
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ ID –ø–ª–µ–π–ª–∏—Å—Ç–∞
    func saveTracks(_ tracks: [ImportedTrack], for id: UUID, isDraft: Bool = false) {
        guard let url = urlForTrackList(id: id, isDraft: isDraft) else { return }

        if let data = try? JSONEncoder().encode(tracks) {
            try? data.write(to: url, options: .atomic)
        }
    }

    
// MARK: - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–µ–∫–ª–∏—Å—Ç –ø–æ –µ–≥–æ ID
    
    // - Parameter id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞
    // - Returns: –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç TrackList —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Ç—Ä–µ–∫–∞–º–∏
    // - Note: –ï—Å–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π (fatalError)
    func getTrackListById(_ id: UUID) -> TrackList {
        let metas = loadTrackListMetas()
        guard let meta = metas.first(where: { $0.id == id }) else {
            fatalError("–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
        let tracks = loadTracks(for: id, isDraft: meta.isDraft)
        return TrackList(id: id, name: meta.name, createdAt: meta.createdAt, tracks: tracks)
    }
    
// MARK: - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏–º –ø–ª–µ–π–ª–∏—Å—Ç–æ–º

    // ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    private(set) var selectedTrackListId: UUID?

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
    func selectTrackList(id: UUID) {
        let metas = loadTrackListMetas()
        if metas.contains(where: { $0.id == id }) {
            selectedTrackListId = id
            print("‚úÖ –í—ã–±—Ä–∞–Ω –ø–ª–µ–π–ª–∏—Å—Ç —Å id: \(id)")
        } else {
            print("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
    }

    // –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç (–∏–ª–∏ nil, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω)
    func getCurrentTrackList() -> TrackList? {
        guard let id = selectedTrackListId else {
            print("‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return nil
        }

        let metas = loadTrackListMetas()
        guard let meta = metas.first(where: { $0.id == id }) else {
            print("‚ùå –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ID: \(id)")
            return nil
        }

        let tracks = loadTracks(for: id, isDraft: meta.isDraft)
        return TrackList(id: id, name: meta.name, createdAt: meta.createdAt, tracks: tracks)
    }

    
// MARK: - –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
    func getOrCreateDefaultTrackList() -> TrackList {
        let metas = loadTrackListMetas()
        if let firstMeta = metas.first {
            let tracks = loadTracks(for: firstMeta.id)
            let list = TrackList(id: firstMeta.id, name: firstMeta.name, createdAt: firstMeta.createdAt, tracks: tracks)
            selectedTrackListId = list.id
            return list
        }

        // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yy, HH:mm"
        let name = formatter.string(from: Date())

        let new = TrackList(
            id: UUID(),
            name: name,
            createdAt: Date(),
            tracks: []
        )

        saveTrackLists([new])
        selectedTrackListId = new.id
        print("üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: \(name)")
        return new
    }

    // –°–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π —Ç—Ä–µ–∫–ª–∏—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ
    func createEmptyTrackList() -> TrackList {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yy, HH:mm"
        let name = formatter.string(from: Date())

        let newId = UUID()
        let createdAt = Date()

        saveTracks([], for: newId)

        var metas = loadTrackListMetas()
        let newMeta = TrackListMeta(id: newId, name: name, createdAt: createdAt, isDraft: false)
        metas.append(newMeta)
        saveTrackListMetas(metas)

        selectedTrackListId = newId
        print("üÜï –ù–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: \(name)")

        return TrackList(id: newId, name: name, createdAt: createdAt, tracks: [])
    }

    // –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    @discardableResult
    func createTrackList(from importedTracks: [ImportedTrack]) -> TrackList {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yy, HH:mm"
        let name = formatter.string(from: Date())

        let newId = UUID()
        let createdAt = Date()

        saveTracks(importedTracks, for: newId)

        var metas = loadTrackListMetas()
        let newMeta = TrackListMeta(id: newId, name: name, createdAt: createdAt, isDraft: false)
        metas.append(newMeta)
        
        saveTrackListMetas(metas)

        selectedTrackListId = newId

        return TrackList(id: newId, name: name, createdAt: createdAt, tracks: importedTracks)
    }

    
// MARK: - –£–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ

    // –£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–∫–ª–∏—Å—Ç: —É–¥–∞–ª—è–µ—Ç JSON —Å —Ç—Ä–µ–∫–∞–º–∏, –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–±–ª–æ–∂–∫–∏
    func deleteTrackList(id: UUID) {
        // –£–¥–∞–ª—è–µ–º –æ–±–ª–æ–∂–∫–∏
        let tracks = loadTracks(for: id)
        for track in tracks {
            if let artworkId = track.artworkId {
                ArtworkManager.deleteArtwork(id: artworkId)
            }
        }

        // –£–¥–∞–ª—è–µ–º JSON-—Ñ–∞–π–ª —Å —Ç—Ä–µ–∫–∞–º–∏
        if let fileURL = documentsDirectory?.appendingPathComponent("tracklist_\(id.uuidString).json") {
            do {
                try FileManager.default.removeItem(at: fileURL)
                print("‚úÖ –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: \(fileURL.lastPathComponent)")
            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: \(error)")
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º tracklists.json
        var metas = loadTrackListMetas()
        metas.removeAll { $0.id == id }
        saveTrackListMetas(metas)

        print("üóëÔ∏è –¢—Ä–µ–∫–ª–∏—Å—Ç —Å ID \(id) —É–¥–∞–ª—ë–Ω")
    }

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ –µ–≥–æ ID
    func renameTrackList(id: UUID, to newName: String) {
        var meta = loadTrackListMetas()

        guard let index = meta.firstIndex(where: { $0.id == id }) else {
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç—Ä–µ–∫–ª–∏—Å—Ç —Å id: \(id)")
            return
        }

        meta[index].name = newName
        saveTrackListMetas(meta)
        print("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: \(newName)")
    }

    
// MARK: - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤

    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–ª–∏—Å—Ç—ã (—Ç—Ä–µ–∫–∏ + –º–µ—Ç–∞)
    func saveTrackLists(_ trackLists: [TrackList]) {
        for list in trackLists {
            saveTracks(list.tracks, for: list.id)
        }

        let metas = trackLists.map {
            TrackListMeta(id: $0.id, name: $0.name, createdAt: $0.createdAt, isDraft: false)
        }

        print("‚úÖ –í—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–æ—Ç–¥–µ–ª—å–Ω–æ —Ç—Ä–µ–∫–∏ –∏ –º–µ—Ç–∞)")
    }

    
// MARK: - –û—Ç–ª–∞–¥–∫–∞

    // –ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    func printTrackLists() {
        let metas = loadTrackListMetas()
        print("\n===== –°–û–î–ï–†–ñ–ò–ú–û–ï –í–°–ï–• –¢–†–ï–ö–õ–ò–°–¢–û–í =====")
        for meta in metas {
            let tracks = loadTracks(for: meta.id)
            print("–ü–ª–µ–π–ª–∏—Å—Ç: \(meta.name), ID: \(meta.id)")
            for track in tracks {
                print("‚Äî \(track.fileName) (\(track.artist ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç") ‚Äî \(track.title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫")), duration: \(track.duration)")
            }
        }
    }
    
    func appendTrackToCurrentList(_ track: ImportedTrack) {
        guard let id = selectedTrackListId else {
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞ ‚Äî –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å")
            return
        }

        let metas = loadTrackListMetas()
        let isDraft = metas.first(where: { $0.id == id })?.isDraft ?? false

        var tracks = loadTracks(for: id, isDraft: isDraft)


        guard !tracks.contains(where: { $0.id == track.id }) else {
            print("‚ö†Ô∏è –¢—Ä–µ–∫ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ")
            return
        }

        tracks.append(track)
        saveTracks(tracks, for: id, isDraft: isDraft)
        print("‚ûï –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç: \(track.fileName)")
    }
}
