//
//  TrackListManager.swift
//  TrackList
//
//  –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞–º–∏ (—á—Ç–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON)
//
//  Created by Pavel Fomin on 27.04.2025.
//

import Foundation

final class TrackListManager {
    static let shared = TrackListManager()  // Singleton –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    private init() {}
    
    
    // MARK: - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏
    private var documentsDirectory: URL? {
        FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first
    }
    
    // MARK: - –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (–º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    func loadTrackListMetas() -> [TrackListMeta] {
        guard let url = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
            .first?.appendingPathComponent("tracklists.json"),
              let data = try? Data(contentsOf: url),
              let metas = try? JSONDecoder().decode([TrackListMeta].self, from: data) else {
            return []
        }
        return metas
    }
    
    
    // MARK: - –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤ –ø–æ ID –ø–ª–µ–π–ª–∏—Å—Ç–∞
    func loadTracks(for id: UUID) -> [ImportedTrack] {
        guard let url = FileManager.default
            .urls(for: .documentDirectory, in: .userDomainMask)
            .first?.appendingPathComponent("tracklist_\(id.uuidString).json"),
              let data = try? Data(contentsOf: url),
              let tracks = try? JSONDecoder().decode([ImportedTrack].self, from: data) else {
            return []
        }
        return tracks
    }
    
    // MARK: - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –ø–æ ID –ø–ª–µ–π–ª–∏—Å—Ç–∞
    func saveTracks(_ tracks: [ImportedTrack], for id: UUID) {
        guard let url = FileManager.default
            .urls(for: .documentDirectory, in: .userDomainMask)
            .first?.appendingPathComponent("tracklist_\(id.uuidString).json") else {
            return
        }
        
        if let data = try? JSONEncoder().encode(tracks) {
            try? data.write(to: url, options: .atomic)
        }
    }
    
    // MARK: - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (–º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    func saveTrackListMetas(_ metas: [TrackListMeta]) {
        guard let url = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
            .first?.appendingPathComponent("tracklists.json") else { return }
        
        if let data = try? JSONEncoder().encode(metas) {
            try? data.write(to: url, options: .atomic)
        }
    }
    
    // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞ –ø–æ ID
    func trackListExists(id: UUID) -> Bool {
        return loadTrackListMetas().contains(where: { $0.id == id })
    }
    
    // MARK: - ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    private(set) var selectedTrackListId: UUID?
    
    // MARK: - –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç –ø–æ id
    func selectTrackList(id: UUID) {
        let metas = loadTrackListMetas()
        if metas.contains(where: { $0.id == id }) {
            selectedTrackListId = id
            print("‚úÖ –í—ã–±—Ä–∞–Ω –ø–ª–µ–π–ª–∏—Å—Ç —Å id: \(id)")
        } else {
            print("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
    }
    
    // MARK: - –í—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–ª–∏—Å—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    func printTrackLists() {
        let metas = loadTrackListMetas()
        print("\n===== –°–û–î–ï–†–ñ–ò–ú–û–ï –í–°–ï–• –¢–†–ï–ö–õ–ò–°–¢–û–í =====")
        for meta in metas {
            let tracks = loadTracks(for: meta.id)
            print("–ü–ª–µ–π–ª–∏—Å—Ç: \(meta.name), ID: \(meta.id)")
            for track in tracks {
                print("‚Äî \(track.fileName) (\(track.artist ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç") ‚Äî \(track.title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫")), duration: \(track.duration)")
            }
        }
        
    }
    // MARK: - –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω)
    func getCurrentTrackList() -> TrackList? {
        guard let id = selectedTrackListId else {
            print("‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return nil
        }
        
        let metas = loadTrackListMetas()
        guard let meta = metas.first(where: { $0.id == id }) else {
            print("‚ùå –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ID: \(id)")
            return nil
        }
        
        let tracks = loadTracks(for: id)
        return TrackList(id: id, name: meta.name, createdAt: meta.createdAt, tracks: tracks)
    }
    
    // MARK: - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (–º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + —Ç—Ä–µ–∫–∏)
    func saveTrackLists(_ trackLists: [TrackList]) {
        // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫–∏ –ø–æ ID
        for list in trackLists {
            saveTracks(list.tracks, for: list.id)
        }
        
        // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        let metas = trackLists.map { TrackListMeta(id: $0.id, name: $0.name, createdAt: $0.createdAt) }
        saveTrackListMetas(metas)
        
        print("‚úÖ –í—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–æ—Ç–¥–µ–ª—å–Ω–æ —Ç—Ä–µ–∫–∏ –∏ –º–µ—Ç–∞)")
    }
    
    // MARK: - –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å "–¥–µ—Ñ–æ–ª—Ç–Ω—ã–π" —Ç—Ä–µ–∫–ª–∏—Å—Ç
    func getOrCreateDefaultTrackList() -> TrackList {
        let metas = loadTrackListMetas()
        if let firstMeta = metas.first {
            let tracks = loadTracks(for: firstMeta.id)
            let list = TrackList(id: firstMeta.id, name: firstMeta.name, createdAt: firstMeta.createdAt, tracks: tracks)
            selectedTrackListId = list.id
            return list
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yy, HH:mm"
        let name = formatter.string(from: Date())
        
        let new = TrackList(
            id: UUID(),
            name: name,
            createdAt: Date(),
            tracks: []
        )
        
        saveTrackLists([new])
        selectedTrackListId = new.id
        print("üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: \(name)")
        return new
    }
    
    // MARK: - –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Ç—Ä–µ–∫–ª–∏—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ
    func createEmptyTrackList() -> TrackList {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yy, HH:mm"
        let name = formatter.string(from: Date())
        
        let newId = UUID()
        let createdAt = Date()
        
        // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Ç—Ä–µ–∫–ª–∏—Å—Ç
        saveTracks([], for: newId)
        
        // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        var metas = loadTrackListMetas()
        let newMeta = TrackListMeta(id: newId, name: name, createdAt: createdAt)
        metas.append(newMeta)
        saveTrackListMetas(metas)
        
        // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
        selectedTrackListId = newId
        print("üÜï –ù–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: \(name)")
        
        return TrackList(id: newId, name: name, createdAt: createdAt, tracks: [])
    }
    
    
    // MARK: - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–ª–∏—Å—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ ImportedTrack
    @discardableResult
    func createTrackList(from importedTracks: [ImportedTrack]) -> TrackList {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yy, HH:mm"
        let name = formatter.string(from: Date())
        
        let newId = UUID()
        let createdAt = Date()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫–∏
        saveTracks(importedTracks, for: newId)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        var metas = loadTrackListMetas()
        let newMeta = TrackListMeta(id: newId, name: name, createdAt: createdAt)
        metas.append(newMeta)
        saveTrackListMetas(metas)
        
        selectedTrackListId = newId
        return TrackList(id: newId, name: name, createdAt: createdAt, tracks: importedTracks)
    }
    
    
    // MARK: - –£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–∫–ª–∏—Å—Ç –ø–æ ID: —É–¥–∞–ª—è–µ—Ç JSON-—Ñ–∞–π–ª –∏ —É–±–∏—Ä–∞–µ—Ç –º–µ—Ç—É –∏–∑ tracklists.json
    func deleteTrackList(id: UUID) {
        // 1. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç—Ä–µ–∫–∞–º–∏
        if let fileURL = documentsDirectory?.appendingPathComponent("tracklist_\(id.uuidString).json") {
            do {
                try FileManager.default.removeItem(at: fileURL)
                print("‚úÖ –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: \(fileURL.lastPathComponent)")
            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: \(error)")
            }
        }

        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        var metas = loadTrackListMetas()
        metas.removeAll { $0.id == id }

        // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –º–µ—Ç—É
        saveTrackListMetas(metas)
        
        print("üóëÔ∏è –¢—Ä–µ–∫–ª–∏—Å—Ç —Å ID \(id) —É–¥–∞–ª—ë–Ω")
    }
}
