//
//  PlayerManager.swift
//  TrackList
//
//  Created by Pavel Fomin on 28.04.2025.
//

import Foundation
import AVFoundation
import Combine

final class PlayerManager {
    private let player = AVPlayer()
    private var timeObserverToken: Any?
    private var currentAccessedURL: URL?
    
    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞
    init() {
        configureAudioSession()
    }

    // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏ (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ)
    private func configureAudioSession() {
        do {
            try AVAudioSession.sharedInstance().setCategory(.playback, mode: .default)
            try AVAudioSession.sharedInstance().setActive(true)
            print("üîä [Init] –ê—É–¥–∏–æ—Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        } catch {
            print("‚ùå [Init] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏: \(error)")
        }
    }
    
    func play(track: Track) {
        do {
            let resolvedURL = track.url

            // MARK: - –ï—Å–ª–∏ —ç—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –∏–≥—Ä–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º play()
            if resolvedURL == currentAccessedURL {
                player.play()
                return
            }
            
            // MARK: - –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏
            try AVAudioSession.sharedInstance().setCategory(.playback, mode: .default)
            try AVAudioSession.sharedInstance().setActive(true)
            
            // MARK: - –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ñ–∞–π–ª—É, –µ—Å–ª–∏ –±—ã–ª
            stopAccessingCurrentTrack()
            
            // MARK: - –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø
            let didStart = resolvedURL.startAccessingSecurityScopedResource()
            if didStart {
                currentAccessedURL = resolvedURL
            } else {
                
            }
            
            // MARK: - –ó–∞–ø—É—Å–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            let playerItem = AVPlayerItem(url: resolvedURL)
            player.replaceCurrentItem(with: playerItem)
            player.play()
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: \(error.localizedDescription)")
            print("ü™≤ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: \(error)")
        }
    }
    
    // MARK: - –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ security scoped —Ä–µ—Å—É—Ä—Å–∞
    func stopAccessingCurrentTrack() {
        if let url = currentAccessedURL {
            url.stopAccessingSecurityScopedResource()
            currentAccessedURL = nil
        }
    }
    
    func pause() {
        player.pause()
    }
    
    func seek(to time: TimeInterval) {
        let cmTime = CMTime(seconds: time, preferredTimescale: 600)
        player.seek(to: cmTime)
    }
    
    func addPeriodicTimeObserver(update: @escaping (TimeInterval) -> Void) {
        removePeriodicTimeObserver()
        let interval = CMTime(seconds: 1.0, preferredTimescale: CMTimeScale(NSEC_PER_SEC))
        timeObserverToken = player.addPeriodicTimeObserver(forInterval: interval, queue: .main) { _ in
            let seconds = self.player.currentTime().seconds
            update(seconds)
        }
    }
    
    func removePeriodicTimeObserver() {
        if let token = timeObserverToken {
            player.removeTimeObserver(token)
            timeObserverToken = nil
        }
    }
    
    // MARK: - –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
    func playCurrent() {
        player.play()
    
    }
}
