//
//  PlayerManager.swift
//  TrackList
//
//  –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –∞—É–¥–∏–æ—Ç—Ä–µ–∫–æ–≤ —á–µ—Ä–µ–∑ AVPlayer.
//  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º, –ø—Ä–æ–≥—Ä–µ—Å—Å, Now Playing Info –∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ Control Center
//
//  Created by Pavel Fomin on 28.04.2025.
//

import Foundation
import AVFoundation
import Combine
import MediaPlayer

final class PlayerManager {
    private let player = AVPlayer()
    private var timeObserverToken: Any?
    private var currentAccessedURL: URL?
    
    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞
    init() {
        configureAudioSession()
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(trackDidFinishPlaying),
            name: .AVPlayerItemDidPlayToEndTime,
            object: nil
        )
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ (–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É)
    @objc private func trackDidFinishPlaying() {
        NotificationCenter.default.post(name: .trackDidFinish, object: nil)
    }
    
    // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏ (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ)
    private func configureAudioSession() {
        do {
            try AVAudioSession.sharedInstance().setCategory(.playback, mode: .default)
            try AVAudioSession.sharedInstance().setActive(true)
            print("üîä [Init] –ê—É–¥–∏–æ—Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        } catch {
            print("‚ùå [Init] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏: \(error)")
        }
    }
    
    // MARK: - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞, AVAsset –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
    func play(track: Track) {
        do {
            let resolvedURL = track.url

            // –ï—Å–ª–∏ —É–∂–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —Ç—Ä–µ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if resolvedURL == currentAccessedURL {
                player.play()
                return
            }
            
            // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏
            try AVAudioSession.sharedInstance().setCategory(.playback, mode: .default)
            try AVAudioSession.sharedInstance().setActive(true)
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ñ–∞–π–ª—É
            stopAccessingCurrentTrack()
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω)
            let didStart = resolvedURL.startAccessingSecurityScopedResource()
            if didStart {
                currentAccessedURL = resolvedURL
            } else {
                
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º AVPlayer —Å –Ω–æ–≤—ã–º —Ç—Ä–µ–∫–æ–º
            let playerItem = AVPlayerItem(url: resolvedURL)
            player.replaceCurrentItem(with: playerItem)
            player.play()
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –∏–∑ playerItem.asset
            Task {
                do {
                    let asset = await playerItem.asset
                    let duration = try await asset.load(.duration)
                    let audioTracks = try await asset.loadTracks(withMediaType: .audio)
                    let timeRange = try await audioTracks.first?.load(.timeRange)

                    let fromTrack = timeRange?.duration.seconds
                    let fromAsset = duration.seconds
                    let fromPlayer = playerItem.duration.seconds

                    let bestDuration = [fromTrack, fromPlayer, fromAsset]
                        .compactMap { $0 }
                        .filter { $0.isFinite && $0 > 0 }
                        .max() ?? 0
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ –≤—å—é–º–æ–¥–µ–ª—å
                    await MainActor.run {
                        NotificationCenter.default.post(
                            name: .trackDurationUpdated,
                            object: nil,
                            userInfo: ["duration": bestDuration]
                        )
                    }
                } catch {
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: \(error.localizedDescription)")
                }
            }
            
            // –û—Ç–ª–∞–¥–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã)
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                Task {
                    if let item = self.player.currentItem {
                        do {
                            let duration = try await item.asset.load(.duration)
                            let trueDuration = item.duration.seconds
                            let assetDuration = duration.seconds
                            print("üïµÔ∏è trueDuration:", trueDuration, "| assetDuration:", assetDuration)
                        } catch {
                            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ asset.duration:", error)
                        }
                    }
                }
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: \(error.localizedDescription)")
            print("ü™≤ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: \(error)")
        }
    }
    
    // MARK: - –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ñ–∞–π–ª—É
    func stopAccessingCurrentTrack() {
        if let url = currentAccessedURL {
            url.stopAccessingSecurityScopedResource()
            currentAccessedURL = nil
        }
    }
    
    // –ü–∞—É–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    func pause() {
        player.pause()
    }
    
    // –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    func seek(to time: TimeInterval) {
        let cmTime = CMTime(seconds: time, preferredTimescale: 600)
        player.seek(to: cmTime)
    }
    
    // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
    func playCurrent() {
        player.play()
    }
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    func observeProgress(update: @escaping (TimeInterval) -> Void) {
        removeTimeObserver() /// —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å

        let interval = CMTime(seconds: 0.5, preferredTimescale: CMTimeScale(NSEC_PER_SEC))
        timeObserverToken = player.addPeriodicTimeObserver(forInterval: interval, queue: .main) { time in
            update(time.seconds)
        }
    }

    // –£–¥–∞–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    func removeTimeObserver() {
        if let token = timeObserverToken {
            player.removeTimeObserver(token)
            timeObserverToken = nil
        }
    }
    
    // MARK: - –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é Now Playing (–¥–ª—è Control Center / —ç–∫—Ä–∞–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
    func updateNowPlayingInfo(track: Track, currentTime: TimeInterval, duration: TimeInterval) {
        var nowPlayingInfo = MPNowPlayingInfoCenter.default().nowPlayingInfo ?? [:]

        nowPlayingInfo[MPMediaItemPropertyTitle] = track.title ?? track.fileName
        nowPlayingInfo[MPMediaItemPropertyArtist] = track.artist ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç"
        nowPlayingInfo[MPMediaItemPropertyPlaybackDuration] = duration
        nowPlayingInfo[MPNowPlayingInfoPropertyElapsedPlaybackTime] = currentTime
        nowPlayingInfo[MPNowPlayingInfoPropertyPlaybackRate] = 1.0

        if let image = track.artwork {
            let artwork = MPMediaItemArtwork(boundsSize: image.size) { _ in image }
            nowPlayingInfo[MPMediaItemPropertyArtwork] = artwork
        }

        MPNowPlayingInfoCenter.default().nowPlayingInfo = nowPlayingInfo
    }
    
    // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫: Play/Pause/Next Previous
    func setupRemoteCommandCenter(
        onPlay: @escaping () -> Void,
        onPause: @escaping () -> Void,
        onNext: @escaping () -> Void,
        onPrevious: @escaping () -> Void
    ) {
        let commandCenter = MPRemoteCommandCenter.shared()

        commandCenter.playCommand.isEnabled = true
        commandCenter.playCommand.addTarget { _ in
            onPlay()
            return .success
        }

        commandCenter.pauseCommand.isEnabled = true
        commandCenter.pauseCommand.addTarget { _ in
            onPause()
            return .success
        }

        commandCenter.nextTrackCommand.isEnabled = true
        commandCenter.nextTrackCommand.addTarget { _ in
            onNext()
            return .success
        }

        commandCenter.previousTrackCommand.isEnabled = true
        commandCenter.previousTrackCommand.addTarget { _ in
            onPrevious()
            return .success
        }
        
        commandCenter.changePlaybackPositionCommand.isEnabled = true
        commandCenter.changePlaybackPositionCommand.addTarget { [weak self] event in
            guard
                let self,
                let event = event as? MPChangePlaybackPositionCommandEvent
            else {
                return .commandFailed
            }

            print("‚è© –ü–µ—Ä–µ–º–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: \(event.positionTime) —Å–µ–∫")
            self.seek(to: event.positionTime)
            return .success
        }
    }
    
    // MARK: - –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ NowPlayingInfo
    func updatePlaybackTimeOnly(currentTime: TimeInterval, isPlaying: Bool) {
        MPNowPlayingInfoCenter.default().nowPlayingInfo?[MPNowPlayingInfoPropertyElapsedPlaybackTime] = currentTime
        MPNowPlayingInfoCenter.default().nowPlayingInfo?[MPNowPlayingInfoPropertyPlaybackRate] = isPlaying ? 1.0 : 0.0
    }

}

// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è NotificationCenter
extension Notification.Name {
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
    static let trackDurationUpdated = Notification.Name("trackDurationUpdated")
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    static let trackDidFinish = Notification.Name("trackDidFinish")
}
