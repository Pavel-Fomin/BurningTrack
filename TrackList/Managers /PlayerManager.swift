//
//  PlayerManager.swift
//  TrackList
//
//  –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –∞—É–¥–∏–æ—Ç—Ä–µ–∫–æ–≤ —á–µ—Ä–µ–∑ AVPlayer.
//  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º, –ø—Ä–æ–≥—Ä–µ—Å—Å, Now Playing Info –∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ Control Center
//
//  Created by Pavel Fomin on 28.04.2025.
//

import Foundation
import Combine
import MediaPlayer
@preconcurrency import AVFoundation

/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∏–∂–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AVPlayer
final class PlayerManager {
    private let player = AVPlayer()       /// –û—Å–Ω–æ–≤–Ω–æ–π AVPlayer
    private var timeObserverToken: Any?   /// –¢–æ–∫–µ–Ω –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    private var currentAccessedURL: URL?  /// URL, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø (–¥–ª—è stopAccessing)
    
    
// MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–µ—Ä–∞
    
    init() {
        print("üß† PlayerManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(trackDidFinishPlaying),
            name: .AVPlayerItemDidPlayToEndTime,
            object: nil
        )
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–≤–µ—Ä—Ö
    @objc private func trackDidFinishPlaying() {
        NotificationCenter.default.post(name: .trackDidFinish, object: nil)
    }
    
    
// MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏ (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ)
    
    /// –í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    private func configureAudioSession() {
        do {
            try AVAudioSession.sharedInstance().setCategory(.playback, mode: .default)
            try AVAudioSession.sharedInstance().setActive(true)
            print("üîä [Init] –ê—É–¥–∏–æ—Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        } catch {
            
        }
    }
    
    
// MARK: - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ —Ç–∏–ø—ã (Imported, Library, Track)
    /// - Parameter track: –¢—Ä–µ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª—É TrackDisplayable
    func play(track: any TrackDisplayable) {
        Task {
            do {
                let resolvedURL: URL

                if let libraryTrack = track as? LibraryTrack {
                    print("üìÄ –≠—Ç–æ LibraryTrack")
                    guard let resolved = libraryTrack.startAccessingIfNeeded() else { return }
                    resolvedURL = resolved

                } else if let importedTrack = track as? ImportedTrack {
                    print("üì• –≠—Ç–æ ImportedTrack")
                    guard importedTrack.startAccessingIfNeeded() else { return }
                    resolvedURL = try importedTrack.resolvedURL()

                } else if let savedTrack = track as? Track {
                    print("üíæ –≠—Ç–æ Track")
                    resolvedURL = savedTrack.url

                } else if let playerTrack = track as? PlayerTrack {
                    print("üéß –≠—Ç–æ PlayerTrack")
                    resolvedURL = playerTrack.url

                } else {
                    print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–∫–∞: \(type(of: track))")
                    return
                }

                if resolvedURL == currentAccessedURL {
                    player.play()
                    return
                }
                
                try AVAudioSession.sharedInstance().setCategory(.playback, mode: .default)
                try AVAudioSession.sharedInstance().setActive(true)
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç—Ä–µ–∫—É
                stopAccessingCurrentTrack()
                currentAccessedURL = resolvedURL
                
                // –°–æ–∑–¥–∞—ë–º AVPlayerItem
                let playerItem = AVPlayerItem(url: resolvedURL)
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                _ = try await playerItem.asset.load(.isPlayable)
                
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º item –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–µ–µ—Ä
                player.replaceCurrentItem(with: playerItem)
                NotificationCenter.default.addObserver(
                    forName: .AVPlayerItemFailedToPlayToEndTime,
                    object: playerItem,
                    queue: .main
                ) { notification in
                    if notification.userInfo?[AVPlayerItemFailedToPlayToEndTimeErrorKey] != nil {
                        
                    } else {
                        
                    }
                }
                player.play()
                
                // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                let asset = await playerItem.asset
                let duration = try await asset.load(.duration)
                let audioTracks = try await asset.loadTracks(withMediaType: .audio)
                let timeRange = try await audioTracks.first?.load(.timeRange)
                
                let fromTrack = timeRange?.duration.seconds
                let fromAsset = duration.seconds
                let fromPlayer = playerItem.duration.seconds
                
                // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                let bestDuration = [fromTrack, fromPlayer, fromAsset]
                    .compactMap { $0 }
                    .filter { $0.isFinite && $0 > 0 }
                    .max() ?? 0
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                await MainActor.run {
                    NotificationCenter.default.post(
                        name: .trackDurationUpdated,
                        object: nil,
                        userInfo: ["duration": bestDuration]
                    )
                }
                
                // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫
                DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                    Task {
                        do {
                            let duration = try await asset.load(.duration)
                            _ = playerItem.duration.seconds
                            _ = duration.seconds
                            /// –ú–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
                            
                        } catch {
                            
                        }
                    }
                }
                
            } catch {
                
            }
        }
    }
    
    
// MARK: - –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–∫—É
    
    /// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ securityScoped
    func stopAccessingCurrentTrack() {
        if let url = currentAccessedURL {
            url.stopAccessingSecurityScopedResource()
            currentAccessedURL = nil
        }
    }
    
    
// MARK: - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    
    // –ü–∞—É–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    func pause() {
        player.pause()
    }
    
    // –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    func seek(to time: TimeInterval) {
        let cmTime = CMTime(seconds: time, preferredTimescale: 600)
        player.seek(to: cmTime)
    }
    
    // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
    func playCurrent() {
        player.play()
    }
    
    
// MARK: - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–ª–µ–µ—Ä–∞
    
    /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    /// - Parameter update: –ó–∞–º—ã–∫–∞–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    func observeProgress(update: @escaping (TimeInterval) -> Void) {
        removeTimeObserver() /// —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        
        let interval = CMTime(seconds: 0.5, preferredTimescale: CMTimeScale(NSEC_PER_SEC))
        timeObserverToken = player.addPeriodicTimeObserver(forInterval: interval, queue: .main) { time in
            update(time.seconds)
        }
    }
    
    /// –£–¥–∞–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    func removeTimeObserver() {
        if let token = timeObserverToken {
            player.removeTimeObserver(token)
            timeObserverToken = nil
        }
    }
    
    
// MARK: - Now Playing Info (–¥–ª—è Control Center –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞)
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
    func updateNowPlayingInfo(track: any TrackDisplayable, currentTime: TimeInterval, duration: TimeInterval) {
        var nowPlayingInfo = MPNowPlayingInfoCenter.default().nowPlayingInfo ?? [:]
        
        nowPlayingInfo[MPMediaItemPropertyTitle] = track.title ?? track.fileName
        nowPlayingInfo[MPMediaItemPropertyArtist] = track.artist ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç"
        nowPlayingInfo[MPMediaItemPropertyPlaybackDuration] = duration
        nowPlayingInfo[MPNowPlayingInfoPropertyElapsedPlaybackTime] = currentTime
        nowPlayingInfo[MPNowPlayingInfoPropertyPlaybackRate] = 1.0
        
        if let image = track.artwork {
            let artwork = MPMediaItemArtwork(boundsSize: image.size) { _ in image }
            nowPlayingInfo[MPMediaItemPropertyArtwork] = artwork
        }
        
        MPNowPlayingInfoCenter.default().nowPlayingInfo = nowPlayingInfo
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    func updatePlaybackTimeOnly(currentTime: TimeInterval, isPlaying: Bool) {
        MPNowPlayingInfoCenter.default().nowPlayingInfo?[MPNowPlayingInfoPropertyElapsedPlaybackTime] = currentTime
        MPNowPlayingInfoCenter.default().nowPlayingInfo?[MPNowPlayingInfoPropertyPlaybackRate] = isPlaying ? 1.0 : 0.0
    }
    
    
// MARK: - –ö–æ–º–∞–Ω–¥—ã —Å —ç–∫—Ä–∞–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥: Play, Pause, Next, Previous, Seek
    func setupRemoteCommandCenter(
        onPlay: @escaping () -> Void,
        onPause: @escaping () -> Void,
        onNext: @escaping () -> Void,
        onPrevious: @escaping () -> Void
    ) {
        let commandCenter = MPRemoteCommandCenter.shared()
        
        /// Play
        commandCenter.playCommand.isEnabled = true
        commandCenter.playCommand.addTarget { _ in
            onPlay()
            return .success
        }
        /// Pause
        commandCenter.pauseCommand.isEnabled = true
        commandCenter.pauseCommand.addTarget { _ in
            onPause()
            return .success
        }
        /// Next
        commandCenter.nextTrackCommand.isEnabled = true
        commandCenter.nextTrackCommand.addTarget { _ in
            onNext()
            return .success
        }
        /// Previous
        commandCenter.previousTrackCommand.isEnabled = true
        commandCenter.previousTrackCommand.addTarget { _ in
            onPrevious()
            return .success
        }
        /// Seek
        commandCenter.changePlaybackPositionCommand.isEnabled = true
        commandCenter.changePlaybackPositionCommand.addTarget { [weak self] event in
            guard
                let self,
                let event = event as? MPChangePlaybackPositionCommandEvent
            else {
                return .commandFailed
            }
            
            self.seek(to: event.positionTime)
            return .success
        }
    }
}


// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è NotificationCenter
    
    extension Notification.Name {
        
        /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è ViewModel'–æ–≤)
        static let trackDurationUpdated = Notification.Name("trackDurationUpdated")
        
        /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
        static let trackDidFinish = Notification.Name("trackDidFinish")
    }


    
    
   
