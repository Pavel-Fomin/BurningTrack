//
//  PlaylistManager.swift
//  TrackList
//
//  –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ö—Ä–∞–Ω–∏—Ç —Ç—Ä–µ–∫–∏ –∏–∑ player.json
//
//  Created by Pavel Fomin on 15.07.2025.
//

import Foundation
import SwiftUI

@MainActor
final class PlaylistManager: ObservableObject {
    
    static let shared = PlaylistManager()
    
    @Published var tracks: [Track] = []
    
    private let fileName = "player.json"
    
    private init() {
        loadFromDisk()
    }
    
    
// MARK: - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ player.json
    
    func loadFromDisk() {
        guard let url = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first?.appendingPathComponent(fileName) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ player.json")
            return
        }
        
        guard FileManager.default.fileExists(atPath: url.path) else {
            print("üìÑ player.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –ø–ª–µ–π–ª–∏—Å—Ç")
            self.tracks = []
            saveToDisk() // —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
            return
        }
        
        do {
            if FileManager.default.fileExists(atPath: url.path) {
                let data = try Data(contentsOf: url)
                let importedTracks = try JSONDecoder().decode([ImportedTrack].self, from: data)
                self.tracks = importedTracks.compactMap { Track(from: $0) }
                print("üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(tracks.count) —Ç—Ä–µ–∫–æ–≤ –∏–∑ player.json")
            } else {
                print("üìÑ player.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π")
                self.tracks = []
                saveToDisk()
            }
        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ player.json: \(error.localizedDescription)")
        }
        
    }
    
    
// MARK: - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–µ–∫–∏ –≤ player.json
    
    func saveToDisk() {
        let importedTracks = tracks.map { $0.asImportedTrack() }
        
        do {
            let data = try JSONEncoder().encode(importedTracks)
            let url = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent(fileName)
            try data.write(to: url, options: .atomic)
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ \(tracks.count) —Ç—Ä–µ–∫–æ–≤ –≤ player.json")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ player.json: \(error.localizedDescription)")
        }
    }
    
    
// MARK: - –ò–º–ø–æ—Ä—Ç —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–µ—Ä
    
    func importTracks(from urls: [URL]) async {
        let newTracks: [Track] = await withTaskGroup(of: Track?.self) { group in
            for url in urls {
                group.addTask {
                    do {
                        let metadata = try await MetadataParser.parseMetadata(from: url)
                        return Track(
                            id: UUID(),
                            url: url,
                            artist: metadata.artist,
                            title: metadata.title ?? url.deletingPathExtension().lastPathComponent,
                            duration: metadata.duration ?? 0,
                            fileName: url.lastPathComponent,
                            artworkId: nil,
                            isAvailable: true
                        )
                    } catch {
                        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: \(error.localizedDescription)")
                        return nil
                    }
                }
            }
           
            var results: [Track] = []
            for await result in group {
                if let track = result {
                    results.append(track)
                }
            }
            return results
        }
        
        // –í–ù–ï taskGroup
        self.tracks.append(contentsOf: newTracks)
        saveToDisk()
    }
    
    // MARK: - –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–∫–æ–≤
    
    func exportTracks(to folder: URL) {
        let availableTracks = tracks
            .filter { $0.isAvailable }
            .map { $0.asImportedTrack() }

        if availableTracks.isEmpty {
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        }

        if let topVC = UIApplication.topViewController() {
            ExportManager.shared.exportViaTempAndPicker(availableTracks, presenter: topVC)
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ topViewController")
        }
    }
    
    
    func exportCurrentTracks(to folder: URL) {
        let availableTracks = tracks
            .filter { $0.isAvailable }
            .map { $0.asImportedTrack() }

        guard !availableTracks.isEmpty else {
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        }

        if let topVC = UIApplication.topViewController() {
            ExportManager.shared.exportViaTempAndPicker(availableTracks, presenter: topVC)
        }
    }
}
