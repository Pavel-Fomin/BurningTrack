//
//  PlaylistManager.swift
//  TrackList
//
//  –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ö—Ä–∞–Ω–∏—Ç —Ç—Ä–µ–∫–∏ –∏–∑ player.json
//
//  Created by Pavel Fomin on 15.07.2025.
//

import Foundation
import SwiftUI

@MainActor
final class PlaylistManager: ObservableObject {
    
    /// –°–∏–Ω–≥–ª—Ç–æ–Ω
    static let shared = PlaylistManager()
    
    /// –¢–µ–∫—É—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç –ø–ª–µ–µ—Ä–∞ (–∏–∑ player.json)
    @Published var tracks: [Track] = []
    
    /// –ò–º—è JSON-—Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø–ª–µ–π–ª–∏—Å—Ç –ø–ª–µ–µ—Ä–∞
    private let fileName = "player.json"
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏ —Å –¥–∏—Å–∫–∞
    private init() {
        loadFromDisk()
    }
    
    
// MARK: - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ player.json
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –∏–∑ player.json –≤ /Documents
    func loadFromDisk() {
        guard let url = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first?.appendingPathComponent(fileName) else {
            return
        }
        
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –ø–ª–µ–π–ª–∏—Å—Ç
        guard FileManager.default.fileExists(atPath: url.path) else {
            print("üìÑ player.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –ø–ª–µ–π–ª–∏—Å—Ç")
            self.tracks = []
            saveToDisk() // —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
            return
        }
        
        do {
            if FileManager.default.fileExists(atPath: url.path) {
                let data = try Data(contentsOf: url)
                let importedTracks = try JSONDecoder().decode([ImportedTrack].self, from: data)
                self.tracks = importedTracks.compactMap { Track(from: $0) }
                print("üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(tracks.count) —Ç—Ä–µ–∫–æ–≤ –∏–∑ player.json")
            } else {
                print("üìÑ player.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π")
                self.tracks = []
                saveToDisk()
            }
        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ player.json: \(error.localizedDescription)")
        }
        
    }
    
    
// MARK: - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–µ–∫–∏ –≤ player.json
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –≤ player.json –≤ —Ñ–æ—Ä–º–∞—Ç–µ [ImportedTrack]
    func saveToDisk() {
        let importedTracks = tracks.map { $0.asImportedTrack() }
        
        do {
            let encoder = makePrettyJSONEncoder()
            let data = try encoder.encode(importedTracks)
            let url = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent(fileName)
            try data.write(to: url, options: .atomic)
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ \(tracks.count) —Ç—Ä–µ–∫–æ–≤ –≤ player.json")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ player.json: \(error.localizedDescription)")
        }
    }
    
    
// MARK: - –ò–º–ø–æ—Ä—Ç —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–µ—Ä
    
    /// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –ø–æ URL-–∞–º: –ø–∞—Ä—Å–∏—Ç —Ç–µ–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ tracks
    /// - Parameter urls: –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
    func importTracks(from urls: [URL]) async {
        let newTracks: [Track] = await withTaskGroup(of: Track?.self) { group in
            for url in urls {
                group.addTask {
                    do {
                        let metadata = try await MetadataParser.parseMetadata(from: url)
                        return Track(
                            id: UUID(),
                            url: url,
                            artist: metadata.artist,
                            title: metadata.title ?? url.deletingPathExtension().lastPathComponent,
                            duration: metadata.duration ?? 0,
                            fileName: url.lastPathComponent,
                            artworkId: nil,
                            isAvailable: true
                        )
                    } catch {
                
                        return nil
                    }
                }
            }
           
            var results: [Track] = []
            for await result in group {
                if let track = result {
                    results.append(track)
                }
            }
            return results
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        self.tracks.append(contentsOf: newTracks)
        saveToDisk()
    }
    
    
// MARK: - –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–∫–æ–≤
    
    /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–∫–∏ (isAvailable == true) —á–µ—Ä–µ–∑ ExportManager
    /// - Parameter folder: –ü–∞–ø–∫–∞ ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ UIDocumentPicker —Å–∞–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç)
    func exportTracks(to folder: URL) {
        let availableTracks = tracks
            .filter { $0.isAvailable }
            .map { $0.asImportedTrack() }

        if availableTracks.isEmpty {
            
            return
        }

        if let topVC = UIApplication.topViewController() {
            ExportManager.shared.exportViaTempAndPicker(availableTracks, presenter: topVC)
        } else {
            
        }
    }
    
    /// –î—É–±–ª–∏—Ä—É—é—â–∏–π –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∏–ª–∏ context menu)
    func exportCurrentTracks(to folder: URL) {
        let availableTracks = tracks
            .filter { $0.isAvailable }
            .map { $0.asImportedTrack() }

        guard !availableTracks.isEmpty else {
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        }

        if let topVC = UIApplication.topViewController() {
            ExportManager.shared.exportViaTempAndPicker(availableTracks, presenter: topVC)
        }
    }
    
    
    // MARK: - –û—á–∏—Å—Ç–∫–∞ –ø–ª–µ–µ—Ä–∞

    /// –û—á–∏—â–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –ø–ª–µ–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç player.json
    func clear() {
        tracks = []
        saveToDisk()
        print("üóëÔ∏è –ü–ª–µ–µ—Ä –æ—á–∏—â–µ–Ω")
    }
}
