//
//  ArtworkManager.swift
//  TrackList
//
//  –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–ª–æ–∂–µ–∫ —Ç—Ä–µ–∫–æ–≤: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ JPEG-—Ñ–∞–π–ª–æ–≤.
//  –ü—É—Ç—å: /Documents/artworks/artwork_<id>.jpg
//
//  Created by Pavel Fomin on 18.05.2025.
//

import UIKit

struct ArtworkManager {
    
    
// MARK: - –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –æ–±–ª–æ–∂–∫–∞–º–∏

    /// URL –¥–æ –ø–∞–ø–∫–∏ /Documents/artworks
    /// –°–æ–∑–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    static let artworksFolderURL: URL = {
        let fileManager = FileManager.default
        let documents = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first!
        let artworkFolder = documents.appendingPathComponent("artworks", isDirectory: true)

        if !fileManager.fileExists(atPath: artworkFolder.path) {
            do {
                try fileManager.createDirectory(at: artworkFolder, withIntermediateDirectories: true)
                print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –æ–±–ª–æ–∂–µ–∫: \(artworkFolder.path)")
            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –æ–±–ª–æ–∂–µ–∫: \(error)")
            }
        }

        return artworkFolder
    }()
    
    
// MARK: - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

      /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID (–æ–±—ã—á–Ω–æ UUID —Ç—Ä–µ–∫–∞)
      /// - Parameters:
      ///  - image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ (UIImage)
      ///  - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–∫–∞
    static func saveArtwork(_ image: UIImage, id: UUID) {
        let url = artworksFolderURL.appendingPathComponent("artwork_\(id.uuidString).jpg")
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPEG —Å–∂–∞—Ç–∏–µ 0.7
        guard let data = image.jpegData(compressionQuality: 0.7) else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å JPEG")
            return
        }

        do {
            try data.write(to: url, options: .atomic)
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ JPEG-–æ–±–ª–æ–∂–∫–∞: \(url.lastPathComponent)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JPEG-–æ–±–ª–æ–∂–∫–∏: \(error)")
        }
    }

    
// MARK: - –ó–∞–≥—Ä—É–∑–∫–∞

    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –ø–æ ID
    /// - Parameter id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–∫–∞
    /// - Returns: UIImage –∏–ª–∏ nil, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è
    static func loadArtwork(id: UUID) -> UIImage? {
        let url = artworksFolderURL.appendingPathComponent("artwork_\(id.uuidString).jpg")

        if !FileManager.default.fileExists(atPath: url.path) {
        
        }

        if let image = UIImage(contentsOfFile: url.path) {
            return image
        } else {
    
            return nil
        }
    }
    
    
// MARK: - –£–¥–∞–ª–µ–Ω–∏–µ

    /// –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –æ–±–ª–æ–∂–∫–∏ –ø–æ ID, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    /// - Parameter id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–∫–∞
    static func deleteArtwork(id: UUID) {
        let url = artworksFolderURL.appendingPathComponent("artwork_\(id.uuidString).jpg")
        try? FileManager.default.removeItem(at: url)
    }
}
