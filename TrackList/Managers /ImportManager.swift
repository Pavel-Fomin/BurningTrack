//
//  ImportManager.swift
//  TrackList

//  –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤, –ø–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
//
//  Created by Pavel Fomin on 28.04.2025.
//

import Foundation
import UniformTypeIdentifiers
import UIKit
import AVFoundation

// MARK: - –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º–ø–æ—Ä—Ç–∞ —Ç—Ä–µ–∫–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
final class ImportManager {
    
    // MARK: - –ò–º–ø–æ—Ä—Ç —Ç—Ä–µ–∫–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
    func importTracks(from urls: [URL], to listId: UUID, completion: @escaping ([ImportedTrack]) -> Void) {
        var importedTracks: [ImportedTrack] = []

        for (index, url) in urls.enumerated() {
            guard url.startAccessingSecurityScopedResource() else {
                print("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ \(url.lastPathComponent)")
                continue
            }
            defer { url.stopAccessingSecurityScopedResource() }

            do {
                // –ß—Ç–µ–Ω–∏–µ bookmark
                let bookmarkData = try url.bookmarkData()
                let bookmarkBase64 = bookmarkData.base64EncodedString()

                // –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                let parsed = try MetadataParser.parseMetadata(from: url)

                // –°–æ–∑–¥–∞—ë–º UUID –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –¥–ª—è track.id, –∏ –¥–ª—è –∏–º–µ–Ω–∏ –æ–±–ª–æ–∂–∫–∏
                let trackId = UUID()

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º .webp –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞
                if let imageData = parsed.artworkData,
                   let image = UIImage(data: imageData) {
                    ArtworkManager.saveArtwork(image, id: trackId)
                }

                let newTrack = ImportedTrack(
                    id: trackId,
                    fileName: url.lastPathComponent,
                    filePath: url.path,
                    orderPrefix: String(format: "%02d", index + 1),
                    title: parsed.title,
                    artist: parsed.artist,
                    album: parsed.album,
                    duration: parsed.duration ?? 0,
                    artworkBase64: nil,
                    bookmarkBase64: bookmarkBase64,
                    artworkId: parsed.artworkData != nil ? trackId : nil,
                )

                importedTracks.append(newTrack)

            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ \(url.lastPathComponent): \(error)")
            }
        }

        print("üìã –í—Å–µ —Ç—Ä–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: \(importedTracks.count) —à—Ç.")
        for t in importedTracks {
            print("‚Äì \(t.title ?? "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")")
        }
       
        completion(importedTracks)
      }
    }

// MARK: - –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ –∏ —á—Ç–µ–Ω–∏–µ–º JSON-—Ñ–∞–π–ª–æ–≤
extension ImportManager {
    
    // MARK: - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ JSON-—Ñ–∞–π–ª–∞
    static func loadTrackList(named name: String) throws -> [ImportedTrack] {
        print("üì• loadTrackList() –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–ø–∏—Å–∫–∞: \(name)")
        let decoder = JSONDecoder()

        let documentsURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        let trackListsFolder = documentsURL.appendingPathComponent("TrackLists")
        let jsonURL = trackListsFolder.appendingPathComponent("\(name).json")

        let data = try Data(contentsOf: jsonURL)
        let tracks = try decoder.decode([ImportedTrack].self, from: data)
        print("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: \(tracks.count) –∏–∑ \(jsonURL.lastPathComponent)")
        return tracks
    }
}
