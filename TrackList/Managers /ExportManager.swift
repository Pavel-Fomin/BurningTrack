//
//  ExportManager.swift
//  TrackList

//  –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ –¥–∏—Å–∫ –∏–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
//
//  Created by Pavel Fomin on 28.04.2025.
//

import UIKit
import Foundation
import UniformTypeIdentifiers

final class ExportManager {
    static let shared = ExportManager()
    
    /// –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ —á–µ—Ä–µ–∑ bookmark ‚Üí tmp ‚Üí UIDocumentPicker
    func exportViaTempAndPicker(_ tracks: [ImportedTrack], presenter: UIViewController) {
        let tempDir = FileManager.default.temporaryDirectory
            .appendingPathComponent("ExportTemp", isDirectory: true)
        
        // 1) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–∫–∏
        try? FileManager.default.removeItem(at: tempDir)
        try? FileManager.default.createDirectory(at: tempDir, withIntermediateDirectories: true)
        
        var copiedFiles: [URL] = []
        
        // 2) –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ ImportedTrack ‚Äî –±–µ–∑ track.isAvailable
        for (index, track) in tracks.enumerated() {
            do {
                // –†–µ–∑–æ–ª–≤–∏–º URL –∏–∑ bookmark
                var isStale = false
                let data = Data(base64Encoded: track.bookmarkBase64 ?? "")!
                let sourceURL = try URL(
                    resolvingBookmarkData: data,
                    options: [],
                    relativeTo: nil,
                    bookmarkDataIsStale: &isStale
                )

                guard sourceURL.startAccessingSecurityScopedResource() else {
                    print("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å security scope –¥–ª—è \(track.fileName)")
                    continue
                }
                defer { sourceURL.stopAccessingSecurityScopedResource() }

                
                // –ö–æ–ø–∏—Ä—É–µ–º
                let prefix = String(format: "%02d", index + 1)
                let exportName = "\(prefix) \(track.fileName)"
                let dstURL = tempDir.appendingPathComponent(exportName)
                
                try FileManager.default.copyItem(at: sourceURL, to: dstURL)
                copiedFiles.append(dstURL)
                print("‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: \(exportName)")
                
            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å \(track.fileName): \(error)")
            }
        }
        
        // 3) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UIDocumentPicker –¥–ª—è tmp
        DispatchQueue.main.async {
            guard !copiedFiles.isEmpty else {
                print("‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            }
            let picker = UIDocumentPickerViewController(forExporting: copiedFiles, asCopy: true)
            picker.shouldShowFileExtensions = true
            presenter.present(picker, animated: true)
        }
    }
}
