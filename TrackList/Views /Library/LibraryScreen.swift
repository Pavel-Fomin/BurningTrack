//
//  LibraryScreen.swift
//  TrackList
//
//  –í–∫–ª–∞–¥–∫–∞ ‚Äú–§–æ–Ω–æ—Ç–µ–∫–∞‚Äù
//
//  Created by Pavel Fomin on 22.06.2025.
//

import SwiftUI

struct LibraryScreen: View {
    @State private var isShowingFolderPicker = false
    private let musicLibraryManager = MusicLibraryManager.shared
    @State private var path: [LibraryFolder] = []
    @State private var didWarmUp = false
    
    let playerViewModel: PlayerViewModel
    let trackListViewModel: TrackListViewModel
    @EnvironmentObject var toast: ToastManager
    @EnvironmentObject private var navObserver: NavigationObserver
    
    var body: some View {
        NavigationStack(path: $path) {
            ZStack {
                VStack(spacing: 0) {
                    if path.isEmpty {
                        LibraryHeaderView {
                            isShowingFolderPicker = true
                        }
                    }
                    
                    MusicLibraryView(
                        path: $path,
                        trackListViewModel: trackListViewModel,
                        playerViewModel: playerViewModel,
                        onAddFolder: {
                            isShowingFolderPicker = true
                        }
                    )
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                }
                
                .navigationDestination(for: LibraryFolder.self) { folder in
                    LibraryFolderView(
                        folder: folder,
                        trackListViewModel: trackListViewModel,
                        playerViewModel: playerViewModel
                    )
                }
                
                .fileImporter(
                    isPresented: $isShowingFolderPicker,
                    allowedContentTypes: [.folder],
                    allowsMultipleSelection: false
                ) { result in
                    switch result {
                    case .success(let urls):
                        if let folderURL = urls.first {
                            musicLibraryManager.saveBookmark(for: folderURL)
                            Task {
                                await musicLibraryManager.restoreAccessAsync()
                            }
                        }
                    case .failure(let error):
                        print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏: \(error.localizedDescription)")
                    }
                }
            }
        }
        .id(path.first?.id ?? UUID())
        
            // MARK: - –†–µ–∞–∫—Ü–∏—è –Ω–∞ revealTrack
            .onReceive(navObserver.$requestedTrackURL.compactMap { $0 }) { url in
                // 1) URL –ø–∞–ø–∫–∏, –≥–¥–µ –ª–µ–∂–∏—Ç —Ç—Ä–µ–∫
                let folderURL = url.deletingLastPathComponent()
                
                // 2) –ò—â–µ–º –ø–∞–ø–∫—É –†–ï–ö–£–†–°–ò–í–ù–û (—É—á–∏—Ç—ã–≤–∞—è –ø–æ–¥–ø–∞–ø–∫–∏)
                guard let folder = findFolder(for: folderURL,
                                              in: MusicLibraryManager.shared.attachedFolders) else {
                    print("‚ö†Ô∏è –ü–∞–ø–∫–∞ –¥–ª—è —Ç—Ä–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö")
                    return
                }
                
                // 3) –£–∂–µ –≤ –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º
                if path.first?.url.standardizedFileURL == folderURL.standardizedFileURL {
                    print("üìå –£–∂–µ –≤–Ω—É—Ç—Ä–∏ –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–∏: \(folder.name)")
                    return
                }
                
                // 4) –î–∞—ë–º SwiftUI –¥–æ—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ç–µ–∫ –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º path –±–µ–∑ –¥—ë—Ä–≥–∞–Ω–∏–π
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.15) {
                    path.removeAll()
                    path.append(folder)
                    print("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É: \(folder.name)")
                }
            }
            
            
            // MARK: - –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            .task {
                guard !didWarmUp else { return }
                didWarmUp = true
                print("üì° LibraryScreen –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã")
            }
            .onDisappear {
                print("üì¥ LibraryScreen –≤—ã–≥—Ä—É–∂–µ–Ω–∞")
            }
        }
    }
    
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –ø–æ URL –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º –¥–µ—Ä–µ–≤–µ
    private func findFolder(for url: URL, in folders: [LibraryFolder]) -> LibraryFolder? {
        for folder in folders {
            // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º ¬´–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ¬ª URL, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ –ø—É—Ç—è—Ö
            if folder.url.standardizedFileURL == url.standardizedFileURL {
                return folder
            }
            if let found = findFolder(for: url, in: folder.subfolders) {
                return found
            }
        }
        return nil
    }

