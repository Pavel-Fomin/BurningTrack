//
//  Track.swift
//  TrackList
//
//  –ú–æ–¥–µ–ª—å —Ç—Ä–µ–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
//  –°–æ–∑–¥–∞—ë—Ç—Å—è –∏–∑ ImportedTrack –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç URL, –æ–±–ª–æ–∂–∫—É, —Ñ–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
//
//  Created by Pavel Fomin on 01.05.2025.
//

import Foundation
import UIKit
import AVFoundation

// MARK: - –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ç—Ä–µ–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞)

struct Track: Identifiable {
    let id: UUID
    let url: URL
    let artist: String?
    let title: String?
    let duration: TimeInterval
    let fileName: String
    let isAvailable: Bool /// –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞
    
    
// MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ isAvailable)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –≤—Ä—É—á–Ω—É—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–ø–∏—é —Ç—Ä–µ–∫–∞
    func refreshAvailability() -> Track {
        var isAvailable = false
        

        let accessGranted = url.startAccessingSecurityScopedResource()
        defer {
            if accessGranted {
                url.stopAccessingSecurityScopedResource()
            }
        }

        if accessGranted {
            do {
                // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å)
                let _ = try Data(contentsOf: url, options: [.mappedIfSafe])
                isAvailable = true
            } catch {
                print("üóëÔ∏è –§–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è: \(error.localizedDescription)")
            }
        }

        return Track(
            id: self.id,
            url: self.url,
            artist: self.artist,
            title: self.title,
            duration: self.duration,
            fileName: self.fileName,
            isAvailable: isAvailable
        )
    }

// MARK: - –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞ –∏–∑ URL —Å –ø–æ–º–æ—â—å—é AVFoundation
    
    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ AVAsset –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Track
    static func load(from url: URL) async throws -> Self {
        let asset = AVURLAsset(url: url)

        var artist = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        var trackName = url.deletingPathExtension().lastPathComponent
        var duration: TimeInterval = 0
        let available = FileManager.default.fileExists(atPath: url.path)
        
        //–ü—Ä–æ–≤–µ—Ä–∫–∞
        do {
            let metadata = try await asset.load(.commonMetadata)

            for item in metadata {
                if item.commonKey?.rawValue == "artist" {
                    if let value = try? await item.load(.stringValue) {
                        artist = value
                    }
                }

                if item.commonKey?.rawValue == "title" {
                    if let value = try? await item.load(.stringValue) {
                        trackName = value
                    }
                }
            }

            let cmDuration = try await asset.load(.duration)
            duration = CMTimeGetSeconds(cmDuration)

        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: \(error)")
        }

        return Self(
            id: UUID(),
            url: url,
            artist: artist,
            title: trackName,
            duration: duration,
            fileName: url.lastPathComponent,
            isAvailable: available
        )
    }
// MARK: - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Track –≤ ImportedTrack (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON)
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Track –≤ ImportedTrack (–¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ JSON)
    func asImportedTrack() -> ImportedTrack {
        return ImportedTrack(
            id: self.id,
            fileName: self.fileName,
            filePath: self.url.path,
            orderPrefix: "",
            title: self.title,
            artist: self.artist,
            album: nil,
            duration: self.duration,
            bookmarkBase64: try? self.url.bookmarkData().base64EncodedString(),
        )
    }
}

// MARK: - Equatable: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ URL

extension Track: Equatable {
    static func == (lhs: Track, rhs: Track) -> Bool {
        return lhs.url == rhs.url
    }
}

// MARK: - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ TrackDisplayable

extension Track: TrackDisplayable {
    var artwork: UIImage? { nil } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º nil, —Ç.–∫. –æ–±–ª–æ–∂–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
}

// MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä

extension Track {
    init(from libraryTrack: LibraryTrack) {
        self.init(
            id: libraryTrack.id,
            url: libraryTrack.url,
            artist: libraryTrack.artist,
            title: libraryTrack.title,
            duration: libraryTrack.duration,
            fileName: libraryTrack.fileName,
            isAvailable: libraryTrack.isAvailable
        )
    }
}


// MARK: -  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ ImportedTrack

extension Track {
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫ –∏–∑ –º–æ–¥–µ–ª–∏ `ImportedTrack`, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –ø–æ `bookmarkBase64`.
    // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ `player.json`.
    // - –ü–∞—Ä–∞–º–µ—Ç—Ä imported: —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ç—Ä–µ–∫–∞, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ.
    // - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `nil`, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, bookmark –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª).
    init?(from imported: ImportedTrack) {
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ bookmark
        guard let url = try? imported.resolvedURL() else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ \(imported.fileName)")
            return nil
        }

        self.init(
            id: imported.id,
            url: url,
            artist: imported.artist,
            title: imported.title ?? imported.fileName,
            duration: imported.duration,
            fileName: imported.fileName,
            isAvailable: FileManager.default.fileExists(atPath: url.path)
        )
    }
}
