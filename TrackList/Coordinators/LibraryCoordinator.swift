//
//  LibraryCoordinator.swift
//  TrackList
//
//  –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞ ¬´–§–æ–Ω–æ—Ç–µ–∫–∞¬ª
//  –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É –∫–æ—Ä–Ω–µ–º, –ø–∞–ø–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤
//  –ü–æ–¥—Ö–æ–¥: MVVM-C (Navigation –±–µ–∑ enum)
//
//  Created by Pavel Fomin on 25.10.2025.
//

import Foundation
import Combine

@MainActor
final class LibraryCoordinator: ObservableObject {
    enum NavigationState: Hashable {
        case root
        case folder(LibraryFolder)
        case tracks(LibraryFolder)
    }

    @Published private(set) var state: NavigationState = .root
    @Published var pendingRevealTrackURL: URL? = nil

    // MARK: - –ù–∞–≤–∏–≥–∞—Ü–∏—è

    func openFolder(_ folder: LibraryFolder) {
        // –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ —ç—Ç–∞ –ø–∞–ø–∫–∞ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
        if case .folder(let current) = state,
           current.url.standardizedFileURL == folder.url.standardizedFileURL {
            print("‚ö†Ô∏è [Coordinator] –ü–∞–ø–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞:", folder.name)
            return
        }

        print("üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É:", folder.name)
        state = .folder(folder)
    }

    func openTracks(for folder: LibraryFolder) {
        print("üéµ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è –ø–∞–ø–∫–∏: \(folder.name)")
        state = .tracks(folder)
    }

    func goBack() {
        switch state {
        case .tracks(let folder):
            // –Ω–∞–∑–∞–¥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–∫–æ–≤ ‚Äî –≤ –ø–∞–ø–∫—É
            state = .folder(folder)
        case .folder:
            // –Ω–∞–∑–∞–¥ –∏–∑ –ø–∞–ø–∫–∏ ‚Äî –≤ –∫–æ—Ä–µ–Ω—å
            state = .root
        default:
            print("üîô –£–∂–µ –Ω–∞ –∫–æ—Ä–Ω–µ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
        }
    }

    func resetToRoot() {
        print("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—Ä–µ–Ω—å —Ñ–æ–Ω–æ—Ç–µ–∫–∏")
        state = .root
    }

    // MARK: - Reveal –ø–µ—Ä–µ—Ö–æ–¥ (–∏–∑ –ø–ª–µ–µ—Ä–∞ –∏–ª–∏ —Ç—Ä–µ–∫–ª–∏—Å—Ç–∞)

    func revealTrack(at url: URL, in folders: [LibraryFolder]) async {
        let folderURL = url.deletingLastPathComponent()

        // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º—Å—è –≤ root –±–µ–∑ –Ω—É–∂–¥—ã
        if let current = currentFolder, current.url == folderURL {
            pendingRevealTrackURL = url
            return
        }

        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É
        pendingRevealTrackURL = url

        await LibraryNavigationHelper().openContainingFolder(
            for: url,
            in: folders,
            using: self
        )
    }

    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ

    var currentFolder: LibraryFolder? {
        switch state {
        case .folder(let f): return f
        case .tracks(let f): return f
        default: return nil
        }
    }
}
